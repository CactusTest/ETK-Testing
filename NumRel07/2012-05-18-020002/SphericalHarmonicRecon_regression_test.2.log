/home/jhar131/TESTING/einsteintoolkit/2012-05-18-020002/Cactus/TEST/sim/SphericalHarmonicRecon
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      May 18 2012 (02:47:46)
Run date:          May 18 2012 (03:33:41-0500)
Run host:          numrel07.cct.lsu.edu (pid=19057)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-05-18-020002/Cactus/TEST/sim/SphericalHarmonicRecon
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-05-18-020002/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-05-18-020002/Cactus/arrangements/PITTNullCode/SphericalHarmonicRecon/test/regression_test.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->Fortran MoL SymBase CoordBase CartGrid3D Time<---
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn Fortran...Success -> active implementation Fortran
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activation requested for 
--->IOASCII IOBasic IOUtil<---
Activating thorn IOASCII...Success -> active implementation IOASCII
Activating thorn IOBasic...Success -> active implementation IOBasic
Activating thorn IOUtil...Success -> active implementation IO
Activation requested for 
--->Boundary LocalReduce  SpaceMask<---
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn LocalReduce...Success -> active implementation LocalReduce
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activation requested for 
--->Pugh PughReduce PughSlab PUGHInterp<---
Activating thorn Pugh...Success -> active implementation Driver
Activating thorn PUGHInterp...Success -> active implementation Interp
Activating thorn PughReduce...Success -> active implementation Reduce
Activating thorn PughSlab...Success -> active implementation Hyperslab
Activation requested for 
--->AEILocalInterp NullGrid NullInterp NullVars<---
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn NullGrid...Success -> active implementation NullGrid
Activating thorn NullInterp...Success -> active implementation NullInterp
Activating thorn NullVars...Success -> active implementation NullVars
Activation requested for 
--->NullEvolve NullDecomp NullSHRExtract SphericalHarmonicRecon<---
Activating thorn NullDecomp...Success -> active implementation NullDecomp
Activating thorn NullEvolve...Success -> active implementation NullEvolve
Activating thorn NullSHRExtract...Success -> active implementation NullSHRExtract
Activating thorn SphericalHarmonicRecon...Success -> active implementation SphericalHarmonicRecon
Activation requested for 
--->NullNews NullConstr<---
Activating thorn NullConstr...Success -> active implementation NullConstr
Activating thorn NullNews...Success -> active implementation NullNews
Activation requested for 
--->LocalInterp  HDF5 IOHDF5 IOHDF5Util<---
Activating thorn HDF5...Success -> active implementation HDF5
Activating thorn IOHDF5...Success -> active implementation IOHDF5
Activating thorn IOHDF5Util...Success -> active implementation IOHDF5Util
Activating thorn LocalInterp...Success -> active implementation LocalInterp
Activation requested for 
--->NaNChecker<---
Activating thorn NaNChecker...Success -> active implementation NaNChecker
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      PUGH::Driver_Startup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      IOUtil::IOUtil_Startup: Startup routine
      IOBasic::IOBasic_Startup: Startup routine
      IOHDF5Util::IOHDF5Util_Startup: IOHDF5Util startup routine
      IOHDF5::IOHDF5_Startup: IOHDF5 startup routine
      IOASCII::IOASCII_Startup: Startup routine
      LocalInterp::LocalInterp_Startup: register LocalInterp's interpolation operators
      LocalReduce::LocalReduce_Startup: Startup routine
      MoL::MoL_Startup: Startup banner
      NullGrid::NullGrid_RegisterCoords: [global] Register stereo coordinates
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators
      PUGH::PUGH_RegisterPUGHP2LRoutines: Register Physical to Logical process mapping routines
      PUGH::PUGH_RegisterPUGHTopologyRoutines: Register topology generation routines routines
      PUGHInterp::PUGHInterp_Startup: PUGHInterp startup routine
      PUGHReduce::PUGHReduce_Startup: Startup routine
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      SphericalHarmonicRecon::SphericalHarmonicRecon_Startup: [global] startup
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      Boundary::Boundary_Check: Check dimension of grid variables
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Fortran::CheckFortranParameters: Test whether Fortran parameters work correctly
      MoL::MoL_ParamCheck: Basic parameter checking
      NullInterp::NullInterp_ParamCheck: [meta] check parameters

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_BASEGRID]
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        IOASCII::IOASCII_Choose1D: Choose 1D output lines
        IOASCII::IOASCII_Choose2D: Choose 2D output planes
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        NullGrid::NullGrid_Coord: [global] setup stereo coords
        NullGrid::NullGrid_RegisterRange: [global] Register stereo coordinate range
        NullGrid::NullGrid_Setup: [global] setup variables
        NullDecomp::NullDecomp_Startup: [global] Initialization
        PUGH::PUGH_Report: Report on PUGH set up
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Given: [global] Set fixed timestep
      [CCTK_INITIAL]
        IOBasic::IOBasic_Init: Initialisation routine
        MoL::MoL_StartLoop: [level] Initialise the step size control
        NullEvolve::NullEvol_InitializeArrays: Initialize all arrays to large values
        NullInterp::NullInterp_MaskInit: Initialize the mask used in interpolation
        NullInterp::NullInterp_TempInit: Initialize the temporaries used in interpolation
        NullSHRExtract::NullSHRE_PreCalcNSYlm: Precalculate spherical harmonics in (p,q) coordinates
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP NullEvol_Initial: Null Init Data
          GROUP NullEvol_BoundaryInit: Boundary data for the Characteristic data
            GROUP SphericalHarmonicReconRead: Schedule group for reconstructing initial world-tube data
              SphericalHarmonicRecon::SphericalHarmonicRecon_ReadData: Read the world tube data and set the data flag to read
              GROUP MetricReconstruction: Group for use by external thorns to use the metric
                NullSHRExtract::NullSHRE_FullMetricRecon: [global] Current extraction of Full Metric and its Derivatives on the Sphere
              SphericalHarmonicRecon::SphericalHarmonicRecon_PostStep: [global] set data flag to unread
            GROUP NullSHRExtractInitial: Group of the waveform extraction initialization
              NullSHRExtract::NullSHRE_MetricReconPast: [global] Copy current metric to Past Levels
              NullSHRExtract::NullSHRE_Pointing_p_p: [global] Target P-P Level Variables for the pointers used in initialization
              NullSHRExtract::NullSHRE_InitialWT_p_p: [global] Extracted variables on the world tube for the p_p_Init level only up to rl
              NullSHRExtract::NullSHRE_Pointing_p: [global] Target P-Level Variables for the pointers used in initialization
              NullSHRExtract::NullSHRE_InitialWT_p: [global] Extracted variables on the world tube for the p-Init level only up to rl
              NullSHRExtract::NullSHRE_Pointing: [global] Gives the target Variables for the pointers used in initialization
              NullSHRExtract::NullSHRE_ExtractWT: [global] Computes the extracted variables on the world tube for the Initial level
          NullEvolve::NullEvol_InitialData: [global] Give J on the initial null hypersurface
          NullEvolve::NullEvol_InitialSlice: [global] Construct null metric on the initial null hypersurface
        NullNews::NullNews_Init: [global] Init News
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        IOASCII::IOASCII_Choose1D: Choose 1D output lines
        IOASCII::IOASCII_Choose2D: Choose 2D output planes
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        NullGrid::NullGrid_Coord: [global] setup stereo coords
        NullGrid::NullGrid_RegisterRange: [global] Register stereo coordinate range
        NullGrid::NullGrid_Setup: [global] setup variables
        NullDecomp::NullDecomp_Startup: [global] Initialization
        PUGH::PUGH_Report: Report on PUGH set up
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Given: [global] Set fixed timestep
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        NullSHRExtract::NullSHRE_PreCalcNSYlm: Precalculate spherical harmonics in (p,q) coordinates
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
        IOHDF5::IOHDF5_InitialDataCheckpoint: Initial data checkpoint routine
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        NullConstr::NullConstr_Driver: calculate constraint components R00, R01, R0A
        NullConstr::NullConstr_AuxConstr: calculate constraints associated with auxiliary variables
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient ICN method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
      NullEvolve::NullEvol_ResetTop: [global] reset top values
      GROUP NullEvol_Boundary: Boundary data
        GROUP SphericalHarmonicReconRead: Schedule group for reconstructing current world-tube data
          SphericalHarmonicRecon::SphericalHarmonicRecon_ReadData: Read the world tube data and set the data flag to read
          GROUP MetricReconstruction: Group for use by external thorns to use the metric
            NullSHRExtract::NullSHRE_FullMetricRecon: [global] Current extraction of Full Metric and its Derivatives on the Sphere
          SphericalHarmonicRecon::SphericalHarmonicRecon_PostStep: [global] set data flag to unread
        GROUP NullSHRExtract: Group of the waveform extraction current level
          NullSHRExtract::NullSHRE_Pointing: [global] Gives the target variables for the pointers used in extraction
          NullSHRExtract::NullSHRE_ExtractWT: [global] Computes the extracted variables on the world tube for the Current level
      NullEvolve::NullEvol_Step: [global] Evolution
      NullNews::NullNews_ScriVals: [global] News get scrivals
      NullNews::NullNews_GetNews: [global] News calc
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
  if (checkpoint)
    [CCTK_CHECKPOINT]
      IOHDF5::IOHDF5_EvolutionCheckpoint: Evolution data checkpoint routine
  endif
  if (analysis)
    [CCTK_ANALYSIS]
      NullConstr::NullConstr_Driver: calculate constraint components R00, R01, R0A
      NullConstr::NullConstr_AuxConstr: calculate constraints associated with auxiliary variables
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      IOHDF5::IOHDF5_TerminationCheckpoint: Termination checkpoint routine
      IOHDF5Util::IOHDF5Util_Terminate: IOHDF5Util termination routine
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      PUGH::Driver_Terminate: Termination routine

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (PUGH): Using physical to logical mappings: direct
INFO (PUGH): Using topology generator: automatic
--------------------------------------------------------------------------------
Driver provided by PUGH
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

INFO (PUGH): Not setting up a topology for 1 dimensions
INFO (PUGH): Not setting up a topology for 2 dimensions
INFO (PUGH): Setting up a topology for 3 dimensions
INFO (IOBasic): I/O Method 'Scalar' registered: output of scalar quantities (grid scalars, reductions) to ASCII files
INFO (IOBasic): I/O Method 'Info' registered: output of scalar quantities (grid scalars, reductions) to screen
INFO (IOHDF5): I/O Method 'IOHDF5' registered: output of grid variables and hyperslabs thereof to HDF5 files
INFO (IOHDF5): Periodic HDF5 output turned off
INFO (IOASCII): I/O Method 'IOASCII_1D' registered: output of 1D lines of grid functions/arrays to ASCII files
INFO (IOASCII): Periodic 1D output turned off
INFO (IOASCII): I/O Method 'IOASCII_2D' registered: output of 2D planes of grid functions/arrays to ASCII files
INFO (IOASCII): Periodic 2D output every 2 iterations
INFO (IOASCII): Periodic 2D output requested for 'NULLNEWS::NewsB[0]'
INFO (IOASCII): I/O Method 'IOASCII_3D' registered: output of 3D grid functions/arrays to ASCII files
INFO (IOASCII): Periodic 3D output turned off
INFO (MoL): Using Iterative Crank Nicholson with 3 iterations as the time integrator.
INFO (MoL): The maximum number of evolved variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
SphericalHarmonicRecon Parameters
# Spin = 0
# Rin = 18
# Rout = 22
# NA = 49
# NL = 7
# NN = 7
# dt = 0.0496032
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.1111111e-01  dy=>1.1111111e-01  dz=>1.1111111e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-0.500, 0.500]  y=>[-0.500, 0.500]  z=>[-0.500, 0.500]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,9]  y=>[0,9]  z=>[0,9]
INFO (NullGrid): Stereographic grid steps:
INFO (NullGrid): dq => 0.100000 , dp => 0.100000
INFO (NullGrid): Stereographic grid ranges:
INFO (NullGrid): q => [-2.300000,2.300000], p => [-2.300000,2.300000]
INFO (NullGrid): Characteristic radial grid step:
INFO (NullGrid): dx => 0.018333
INFO (NullGrid): Characteristic radial grid ranges:
INFO (NullGrid): xb => [0.450000,1.000000], rb => [16.363636,+infty]
INFO (PUGH): MPI Evolution on 2 processors
INFO (PUGH): 3-dimensional grid functions
INFO (PUGH):   Size: 10 10 10
INFO (PUGH):   Processor topology: 2 x 1 x 1
INFO (PUGH):   Local load: 600   [6 x 10 x 10]
INFO (PUGH):   Maximum load skew: 0.000000
INFO (NullInterp): will set up circle-shaped guard point mask
INFO (NullInterp):  setting up a circular evolution mask of radius   2.0000000000000000
INFO (NullInterp):  the guard point shell is set for a max. stencil size of           3
INFO (NullSHRExtract):  CCE world-tube index range is           4           4   20.404040404040405        20.404040404040405
INFO (NullEvolve): Null Initial Data
INFO (NullEvolve): Null Initial Slice
 The Boundary mask is at:            4
 The Evolution mask is at:            1
INFO (NullNews): Null News setup
INFO (IOBasic): Periodic scalar output requested for 'NULLNEWS::NewsB[0]'
INFO (NullSHRExtract):  CCE world-tube index range is           4           4   20.404040404040405        20.404040404040405
WARNING level 0 in thorn NullNews processor 1 host numrel07.cct.lsu.edu
  (line 214 of NullNews_Bondi.F90): 
  -> Abs qh or abs ph > 1.2
application called MPI_Abort(MPI_COMM_WORLD, 0) - process 1
WARNING level 0 in thorn NullNews processor 0 host numrel07.cct.lsu.edu
  (line 214 of NullNews_Bondi.F90): 
  -> Abs qh or abs ph > 1.2
WARNING level 0 in thorn NullNews processor 0 host numrel07.cct.lsu.edu
  (line 214 of NullNews_Bondi.F90): 
  -> Abs qh or abs ph > 1.2
application called MPI_Abort(MPI_COMM_WORLD, 0) - process 0
