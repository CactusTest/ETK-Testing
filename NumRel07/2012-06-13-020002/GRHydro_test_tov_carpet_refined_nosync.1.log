/home/jhar131/TESTING/einsteintoolkit/2012-06-13-020002/Cactus/TEST/sim/GRHydro
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      Jun 13 2012 (02:49:18)
Run date:          Jun 13 2012 (02:57:00-0500)
Run host:          numrel07.cct.lsu.edu (pid=17698)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-06-13-020002/Cactus/TEST/sim/GRHydro
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-06-13-020002/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-06-13-020002/Cactus/arrangements/EinsteinEvolve/GRHydro/test/test_tov_carpet_refined_nosync.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->time MoL coordbase symbase cartgrid3d ioutil boundary admbase staticconformal spacemask admcoupling coordgauge admmacros hydrobase grhydro grhydro_initdata tovsolver eos_omni Constants LocalReduce Carpet CarpetLib CarpetInterp CarpetReduce CarpetIOScalar CarpetIOBasic LoopControl TmunuBase InitBase CarpetRegrid2 ReflectionSymmetry CarpetIOASCII<---
Activating thorn admbase...Success -> active implementation ADMBase
Activating thorn admcoupling...Success -> active implementation ADMCoupling
Activating thorn admmacros...Success -> active implementation ADMMacros
Activating thorn boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetRegrid2...Success -> active implementation CarpetRegrid2
Activating thorn cartgrid3d...Success -> active implementation grid
Activating thorn Constants...Success -> active implementation Constants
Activating thorn coordbase...Success -> active implementation CoordBase
Activating thorn coordgauge...Success -> active implementation CoordGauge
Activating thorn eos_omni...Success -> active implementation EOS_Omni
Activating thorn grhydro...Success -> active implementation GRHydro
Activating thorn grhydro_initdata...Success -> active implementation GRHydro_init_data
Activating thorn hydrobase...Success -> active implementation HydroBase
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn ioutil...Success -> active implementation IO
Activating thorn LocalReduce...Success -> active implementation LocalReduce
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn ReflectionSymmetry...Success -> active implementation ReflectionSymmetry
Activating thorn spacemask...Success -> active implementation SpaceMask
Activating thorn staticconformal...Success -> active implementation StaticConformal
Activating thorn symbase...Success -> active implementation SymBase
Activating thorn time...Success -> active implementation time
Activating thorn TmunuBase...Success -> active implementation TmunuBase
Activating thorn tovsolver...Success -> active implementation TOVSolver
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CarpetLib::CarpetLib_registercycleclock: [global] Register cycle based timer
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      GRHydro::GRHydro_RegisterMask: Register the hydro masks
      HydroBase::HydroBase_StartUp: Startup banner
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LocalReduce::LocalReduce_Startup: Startup routine
      LoopControl::lc_check_type_sizes: [meta] Check that sizes of control structures are identical in C and Fortran
      MoL::MoL_Startup: Startup banner
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CarpetRegrid2::CarpetRegrid2_Initialise: [global] Initialise locations of refined regions
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      EOS_Omni::EOS_Omni_Startup: [global] Set up conversion factors and other fun stuff
      GRHydro::GRHydro_Startup: Startup banner
      GRHydro::GRHydro_ClearLastMoLPostStep: [global] Initialize InLastMoLPostStep to zero
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        GRHydro::GRHydro_Register: Register variables for MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      SpaceMask::MaskSym: [global] Set grid symmetries for mask
      SpaceMask::MaskSym_emask: [global] Set grid symmetries for emask (compatibility mode)
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ReflectionSymmetry::ReflectionSymmetry_Register: Register reflection symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
      TOVSolver::TOV_C_AllocateMemory: [global] Allocate memory for TOVSolver_C
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetRegrid2::CarpetRegrid2_ParamCheck: Check parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      GRHydro::GRHydro_ParamCheck: Check parameters
      GRHydro_InitData::GRHydro_InitData_CheckParameters: Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      TOVSolver::TOV_C_ParamCheck: [global] Check parameters

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
          GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
          GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set mask to one
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOff: Set the dtshift_state variable to 0
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        GRHydro::GRHydro_Rho_Minima_Setup: Set up minimum for the rest-mass density in the atmosphere (before intial data)
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
        GROUP HydroBase_Initial: HydroBase initial data group
          GROUP GRHydro_Initial: GRHydro initial data group
          HydroBase::HydroBase_Zero: Set up vacuum hydro initial data
          GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
            HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
          GROUP TOV_Initial_Data: Group for the TOV initial data
            TOVSolver::TOV_C_Integrate_RHS: [global] Integrate the 1d equations for the TOV star
            TOVSolver::TOV_C_Exact: Set up the 3d quantities for the TOV star
        GROUP HydroBase_Prim2ConInitial: Recover the conservative variables from the primitive variables
          GRHydro::Primitive2ConservativePolyCells: Convert initial data given in primive variables to conserved variables
        MoL::MoL_StartLoop: [level] Initialise the step size control
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        GROUP SetTmunu: Calculate the stress-energy tensor
          TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
          TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
      [CCTK_POSTINITIAL]
        GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
             if (GRHydro::InLastMoLPostStep)
          GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
               if (GRHydro::InLastMoLPostStep)
            GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
              GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              GRHydro::Con2Prim: Convert back to primitive variables (polytype)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
            TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
             if (GRHydro::InLastMoLPostStep)
          GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
               if (GRHydro::InLastMoLPostStep)
            GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
              GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              GRHydro::Con2Prim: Convert back to primitive variables (polytype)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
            TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
        GRHydro::GRHydro_Rho_Minima_Setup_Final: Set the value of the rest-mass density of the atmosphere which will be used during the evolution
        GRHydro::GRHydro_InitialAtmosphereReset: Use mask to enforce atmosphere at initial time
        GROUP Con2Prim: Convert from conservative to primitive variables (might be redundant)
          GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Calculate the stress-energy tensor
          TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
          TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
        GROUP ADMConstraintsGroup: Evaluate ADM constraints, and perform symmetry boundary conditions
        TOVSolver::TOV_C_FreeMemory: [global] Free memory from TOVSolver_C
      [CCTK_POSTSTEP]
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
        GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
        GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
        SpaceMask::CheckMask: Ensure that all mask values are legal
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOff: Set the dtshift_state variable to 0
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
             if (GRHydro::InLastMoLPostStep)
          GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
               if (GRHydro::InLastMoLPostStep)
            GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
              GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              GRHydro::Con2Prim: Convert back to primitive variables (polytype)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
            TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      SpaceMask::MaskZero: Initialise mask to zero
      GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
        GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
        GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      SpaceMask::MaskOne: Set mask to one
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
           if (GRHydro::InLastMoLPostStep)
        GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
             if (GRHydro::InLastMoLPostStep)
          GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
            GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
          TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      ADMBase::ADMBase_LapseStatic: Copy the lapse to the current time level
      ADMBase::ADMBase_ShiftStatic: Copy the shift to the current time level
      ADMBase::ADMBase_Static: Copy the metric and extrinsic curvature to the current time level
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      GRHydro::reset_GRHydro_C2P_failed: Reset the mask function that contains the points where C2P has failed (at PRESTEP)
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
            GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                GROUP HydroBase_RHS: Groups for scheduling tasks for calculating RHS of hydro variables
                  GROUP GRHydroRHS: Calculate the update terms
                    GRHydro::SourceTerms: Source term calculation
                    GRHydro::GRHydroStartLoop: [level] Set the flux_direction variable
                    while (GRHydro::flux_direction)
                      GROUP FluxTerms: Calculation of intercell fluxes
                        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                        GRHydro::Reconstruct: Reconstruct the functions at the cell boundaries
                        GRHydro::Riemann: Solve the local Riemann problems
                        GRHydro::UpdateCalcul: Calculate the update term from the fluxes
                        GRHydro::GRHydroAdvanceLoop: [level] Decrement the flux_direction variable
                    end while
                    GRHydro::GRHydroUpdateAtmosphereMask: Alter the update terms if inside the atmosphere region
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient ICN method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
                GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
                GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
                   if (GRHydro::InLastMoLPostStep)
                GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
                GROUP HydroBase_PostStep: Post step tasks for hydro thorns
                  GROUP GRHydro_PostStep: Post step tasks for GRHydro
                     if (GRHydro::InLastMoLPostStep)
                  GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
                    GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
                    GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                        ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
                    GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
                    GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                      GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
                    GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                        ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
                    GRHydro::Con2Prim: Convert back to primitive variables (polytype)
                GROUP SetTmunu: Group for calculating the stress-energy tensor
                  TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
                  GROUP AddToTmunu: Add to the stress-energy tensor here
                    GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
                  TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
              GRHydro::GRHydro_ClearLastMoLPostStep: [level] Reset InLastMoLPostStep to zero
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
      end while
      GRHydro::sync_GRHydro_C2P_failed: Syncronise the mask function that contains the points where C2P has failed
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
           if (GRHydro::InLastMoLPostStep)
        GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
             if (GRHydro::InLastMoLPostStep)
          GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
            GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
          TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
      GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
      GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
      GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
      SpaceMask::CheckMask: Ensure that all mask values are legal
  if (checkpoint)
    [CCTK_CHECKPOINT]
  endif
  if (analysis)
    [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::lc_printstats_terminate: [meta] Output loop control statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      SpaceMask::MaskZero: Initialise mask to zero
      GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
        GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
        GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      SpaceMask::MaskOne: Set mask to one
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
           if (GRHydro::InLastMoLPostStep)
        GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
             if (GRHydro::InLastMoLPostStep)
          GROUP GRHydro_PrimitiveBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectPrimitiveBoundaries: [level] Select primitive variables for boudary conditions
            GROUP GRHydro_ApplyPrimitiveBCs: Apply boundary conditions to primitive variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_SetTmunu: Calculate the stress-energy tensor using the old CalcTmunu mechanism
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
          TmunuBase::TmunuBase_CopyTmunu: Copy the stress-energy tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
Current core file size limit: hard=[unlimited], soft=0 MB
Current memory size limit: hard=[unlimited], soft=[unlimited]
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
HydroBase: Let it flow.
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 4 threads, this is thread 0
INFO (Carpet): There are 4 threads in total
INFO (Carpet): There are 4 threads per process
INFO (Carpet): Host listing:
   host 0: "numrel07.cct.lsu.edu"
INFO (Carpet): Host/process mapping:
   process 0: host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): Host mapping: This is process 0, host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): This process runs on host numrel07.cct.lsu.edu, pid=17698
INFO (Carpet): This process runs on 4 cores: 0-3
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): [tl=0] Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[0,1,1],[0,0,0]]
INFO (Carpet): [tl=0] CoordBase domain specification for map 0:
   physical extent: [-15,0,0] : [15.001,15.001,15.001]   ([30.001,15.001,15.001])
   interior extent: [-13.1249,0,0] : [13.1259,13.1259,13.1259]   ([26.2509,13.1259,13.1259])
   exterior extent: [-18.7501,-5.62538,-5.62538] : [18.7511,18.7512,18.7512]   ([37.5012,24.3766,24.3766])
   base_spacing   : [1.87506,1.87512,1.87512]
INFO (Carpet): [tl=0] Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-15,0,0] : [15.001,15.001,15.001]   ([30.001,15.001,15.001])
   interior extent   : [-13.1249,0,0] : [13.1259,13.1259,13.1259]   ([26.2509,13.1259,13.1259])
   exterior extent   : [-18.7501,-5.62538,-5.62538] : [18.7511,18.7512,18.7512]   ([37.5012,24.3766,24.3766])
   spacing           : [1.87506,1.87512,1.87512]
INFO (Carpet): [tl=0] Base grid specification for map 0:
   number of grid points             : [21,14,14]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[6,6,6],[6,6,6]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[6,6,6],[6,6,6]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 399 grid functions in 91 groups
INFO (Carpet):    There are 206 grid scalars in 51 groups
INFO (Carpet):    There are 96 1-dimensional grid arrays in 9 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 1 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   HYDROBASE::rho
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Iterative Crank Nicholson with 3 iterations as the time integrator.
INFO (MoL): The maximum number of evolved variables is 5. 4 are registered.
INFO (MoL): The maximum number of constrained variables is 27. 18 are registered.
INFO (MoL): The maximum number of SandR variables is 16. 16 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (SymBase): Symmetry on lower y-face: reflection_symmetry
INFO (SymBase): Symmetry on lower z-face: reflection_symmetry
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [20,13,13]   ([21,14,14] + PADDING) 4116
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-18.750125000000001,-5.625375000000000,-5.625375000000000] : [18.751124999999998,18.751249999999999,18.751249999999999] : [1.875062500000000,1.875125000000000,1.875125000000000]
WARNING[L1,P0] (Carpet): There are not enough time levels for the desired temporal prolongation order in the grid function group "TMUNUBASE::STRESS_ENERGY_SCALAR".  With Carpet::prolongation_order_time=2, you need at least 3 time levels.
WARNING[L1,P0] (Carpet): There are not enough time levels for the desired temporal prolongation order in the grid function group "TMUNUBASE::STRESS_ENERGY_VECTOR".  With Carpet::prolongation_order_time=2, you need at least 3 time levels.
WARNING[L1,P0] (Carpet): There are not enough time levels for the desired temporal prolongation order in the grid function group "TMUNUBASE::STRESS_ENERGY_TENSOR".  With Carpet::prolongation_order_time=2, you need at least 3 time levels.
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 1k active, 1k owned (+0%), 4k total (+329%), 1 steps/time
INFO (Carpet): GF: vars: 136, pts: 0M active, 0M owned (+0%), 1M total (+329%), 1.0 comp/proc
INFO (Carpet): GA: vars: 259, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.004 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv      max/avg-1
INFO (Carpet): Level  0:       0M      0M      0M      0M active      0%
INFO (ADMMacros): Spatial finite differencing order: 2
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.8750625e+00  dy=>1.8751250e+00  dz=>1.8751250e+00
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-18.750,18.751]  y=>[-5.625,18.751]  z=>[-5.625,18.751]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,20]  y=>[0,13]  z=>[0,13]
INFO (Time): Timestep set to 0.703148 (courant_static)
INFO (GRHydro): Trying to get EOS handles
INFO (EOS_Omni): GetHandle
INFO (GRHydro): Trying to get EOS handles
INFO (EOS_Omni): GetHandle
INFO (EOS_Omni): GetHandle
INFO (GRHydro): GRHydro will use the 2D_Polytrope equation of state.
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (TOVSolver): Integrated TOV equation
INFO (TOVSolver): Information about the TOVs used:
INFO (): TOV    radius    mass  bary_mass mass(g) cent.rho rho(cgi)        K   K(cgi)    Gamma
INFO ():   1   8.12502  1.40016  1.50618 2.78e+33  0.00128 7.92e+14      100 1.45e+05        2
INFO (TOVSolver): Not using old matter initial data
INFO (TOVSolver): Done interpolation.
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (CarpetRegrid2): Increasing number of levels of centre 1 to 2 (it=5)
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 0
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 1
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [20,13,13]   ([21,14,14] + PADDING) 4116
   [1][0][0]   exterior: [2,3,3] : [38,24,24]   ([37,22,22] + PADDING) 17908
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-18.750125000000001,-5.625375000000000,-5.625375000000000] : [18.751124999999998,18.751249999999999,18.751249999999999] : [1.875062500000000,1.875125000000000,1.875125000000000]
   [1][0][0]   exterior: [-16.875062500000002,-2.812687500000000,-2.812687500000000] : [16.876062500000000,16.876124999999995,16.876124999999995] : [0.937531250000000,0.937562500000000,0.937562500000000]
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 8k active, 8k owned (+0%), 19k total (+137%), 4.27 steps/time
INFO (Carpet): GF: vars: 136, pts: 1M active, 1M owned (+0%), 3M total (+148%), 1.0 comp/proc
INFO (Carpet): GA: vars: 259, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.024 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv      max/avg-1
INFO (Carpet): Level  0:       0M      0M      0M      0M active      0%
INFO (Carpet): Level  1:       1M      1M      1M      0M active      0%
INFO (CarpetReduce): Simulation domain volume:  1024
INFO (CarpetReduce): Additional excised volume: 0
INFO (CarpetReduce): Reduction weight sum:      1204.25
WARNING[L1,P0] (CarpetReduce): Simulation domain volume and reduction weight sum differ
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (CarpetReduce): Simulation domain volume:  1024
INFO (CarpetReduce): Additional excised volume: 0
INFO (CarpetReduce): Reduction weight sum:      1204.25
WARNING[L1,P0] (CarpetReduce): Simulation domain volume and reduction weight sum differ
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (CarpetReduce): Simulation domain volume:  1024
INFO (CarpetReduce): Additional excised volume: 0
INFO (CarpetReduce): Reduction weight sum:      1204.25
WARNING[L1,P0] (CarpetReduce): Simulation domain volume and reduction weight sum differ
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
LoopControl timing statistics:
Loop #0 "interpolate_end_3d_3tl":
   total count: 48   total setup: 0.000597291   total calc: 0.00359994
   avg calc: 7.49987e-05   avg first calc: 7.49612e-05
   avg improvement: -0%   saved: -1.79825e-06 seconds
Loop #1 "interpolate_3d_3tl":
   total count: 64   total setup: 0.0377304   total calc: 0.0347962
   avg calc: 0.000543691   avg first calc: 0.000502573
   avg improvement: -8%   saved: -0.00263155 seconds
Loop #2 "MaskBase_SetMask_all":
   total count: 28   total setup: 0.000495321   total calc: 0.00216511
   avg calc: 7.73252e-05   avg first calc: 7.69721e-05
   avg improvement: -0%   saved: -9.88751e-06 seconds
Loop #3 "CoordBase_SetupMask_boundary2":
   total count: 168   total setup: 0.00175668   total calc: 0.00196171
   avg calc: 1.16769e-05   avg first calc: 1.16593e-05
   avg improvement: -0%   saved: -2.94603e-06 seconds
Loop #4 "CoordBase_SetupMask_boundary":
   total count: 168   total setup: 0.00164409   total calc: 0.00218326
   avg calc: 1.29956e-05   avg first calc: 1.30851e-05
   avg improvement: 0%   saved: 1.50375e-05 seconds
Loop #5 "MaskBase_InitMask_all":
   total count: 28   total setup: 0.000389161   total calc: 0.00127867
   avg calc: 4.56668e-05   avg first calc: 4.66424e-05
   avg improvement: 1%   saved: 2.7317e-05 seconds
Loop #6 "CarpetClassifyPoints_all":
   total count: 12   total setup: 0.00415701   total calc: 0.00363514
   avg calc: 0.000302929   avg first calc: 0.000257984
   avg improvement: -10%   saved: -0.000539334 seconds
Total calculation time: 0.0500958 seconds; total saved time: -0.00314316 seconds
--------------------------------------------------------------------------------
Done.
