/home/jhar131/TESTING/einsteintoolkit/2012-05-28-020001/Cactus/TEST/sim/CarpetIOASCII
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      May 28 2012 (02:48:44)
Run date:          May 28 2012 (03:47:20-0500)
Run host:          numrel07.cct.lsu.edu (pid=14472)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-05-28-020001/Cactus/TEST/sim/CarpetIOASCII
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-05-28-020001/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-05-28-020001/Cactus/arrangements/Carpet/CarpetIOASCII/test/compact.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->
   AEILocalInterp
   Carpet       
   CarpetInterp
   CarpetIOASCII
   CarpetLib
   CarpetReduce
   CartGrid3D
   CoordBase
   InterpToArray
   IOUtil
   LoopControl
   SymBase
<---
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn InterpToArray...Success -> active implementation InterpToArray
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn SymBase...Success -> active implementation SymBase
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CarpetLib::CarpetLib_registercycleclock: [global] Register cycle based timer
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LoopControl::lc_check_type_sizes: [meta] Check that sizes of control structures are identical in C and Fortran
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      [CCTK_BASEGRID]
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
      [CCTK_INITIAL]
      [CCTK_POSTINITIAL]
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        InterpToArray::InterpToArray: [global] Interpolate to grid arrays
        LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
    [CCTK_EVOL]
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
    [CCTK_POSTSTEP]
  if (checkpoint)
    [CCTK_CHECKPOINT]
  endif
  if (analysis)
    [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      InterpToArray::InterpToArray: [global] Interpolate to grid arrays
      LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::lc_printstats_terminate: [meta] Output loop control statistics

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
Current core file size limit: hard=[unlimited], soft=0 MB
Current memory size limit: hard=[unlimited], soft=[unlimited]
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 4 threads, this is thread 0
INFO (Carpet): There are 8 threads in total
INFO (Carpet): There are 4 threads per process
INFO (Carpet): Host listing:
   host 0: "numrel07.cct.lsu.edu"
INFO (Carpet): Host/process mapping:
   processes 0-1: host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): Host mapping: This is process 0, host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): This process runs on host numrel07.cct.lsu.edu, pid=14472
INFO (Carpet): This process runs on 4 cores: 0-3
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): [tl=0] Boundary specification for map 0:
   nboundaryzones: [[1,1,1],[1,1,1]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,1,1],[1,1,1]]
INFO (Carpet): [tl=0] Standard grid specification for map 0:
   number of grid points: [7,8,9]
INFO (Carpet): [tl=0] CoordBase domain specification for map 0:
   physical extent: [0,0,0] : [6,7,8]   ([6,7,8])
   interior extent: [1,1,1] : [5,6,7]   ([4,5,6])
   exterior extent: [0,0,0] : [6,7,8]   ([6,7,8])
   base_spacing   : [1,1,1]
INFO (Carpet): [tl=0] Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [0,0,0] : [6,7,8]   ([6,7,8])
   interior extent   : [1,1,1] : [5,6,7]   ([4,5,6])
   exterior extent   : [0,0,0] : [6,7,8]   ([6,7,8])
   spacing           : [1,1,1]
INFO (Carpet): [tl=0] Base grid specification for map 0:
   number of grid points             : [7,8,9]
   number of coarse grid ghost points: [[1,1,1],[1,1,1]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 9 grid functions in 6 groups
INFO (Carpet):    There are 46 grid scalars in 7 groups
INFO (Carpet):    There are 7 1-dimensional grid arrays in 4 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 1 3-dimensional grid arrays in 2 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 0D AMR output requested for:
   GRID::r
   INTERPTOARRAY::scalars[0]
   INTERPTOARRAY::arrays1d[0]
   INTERPTOARRAY::arrays2d[0]
   INTERPTOARRAY::arrays3d[0]
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   GRID::r
   INTERPTOARRAY::arrays1d[0]
   INTERPTOARRAY::arrays2d[0]
   INTERPTOARRAY::arrays3d[0]
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 2D AMR output requested for:
   GRID::r
   INTERPTOARRAY::arrays2d[0]
   INTERPTOARRAY::arrays3d[0]
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 3D AMR output requested for:
   GRID::r
   INTERPTOARRAY::arrays3d[0]
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.6666667e-01  dy=>1.4285714e-01  dz=>1.2500000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-0.500, 0.500]  y=>[-0.500, 0.500]  z=>[-0.500, 0.500]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,6]  y=>[0,7]  z=>[0,8]
INFO (CarpetReduce): Simulation domain volume:  1
INFO (CarpetReduce): Additional excised volume: 0
INFO (CarpetReduce): Reduction weight sum:      336
WARNING[L1,P0] (CarpetReduce): Simulation domain volume and reduction weight sum differ
LoopControl timing statistics:
Loop #0 "MaskBase_SetMask_all":
   total count: 4   total setup: 0   total calc: 0.00617767
   avg calc: 0.00154442   avg first calc: 0.00154442
   avg improvement: 0%   saved: 0 seconds
Loop #1 "CoordBase_SetupMask_ghost":
   total count: 4   total setup: 0   total calc: 0.00626372
   avg calc: 0.00156593   avg first calc: 0.00156593
   avg improvement: 0%   saved: 0 seconds
Loop #2 "CoordBase_SetupMask_boundary2":
   total count: 20   total setup: 0.0165249   total calc: 0.0309778
   avg calc: 0.00154889   avg first calc: 0.00149194
   avg improvement: -4%   saved: -0.00113905 seconds
Loop #3 "CoordBase_SetupMask_boundary":
   total count: 20   total setup: 0.0165205   total calc: 0.0315885
   avg calc: 0.00157942   avg first calc: 0.00152524
   avg improvement: -4%   saved: -0.00108361 seconds
Loop #4 "MaskBase_InitMask_all":
   total count: 4   total setup: 0   total calc: 0.00721469
   avg calc: 0.00180367   avg first calc: 0.00180367
   avg improvement: 0%   saved: 0 seconds
Total calculation time: 0.0822223 seconds; total saved time: -0.00222266 seconds
--------------------------------------------------------------------------------
Done.
