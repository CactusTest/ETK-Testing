/home/jhar131/TESTING/einsteintoolkit/2012-06-16-020001/Cactus/TEST/sim/ML_BSSN_Test
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      Jun 16 2012 (02:53:17)
Run date:          Jun 16 2012 (03:44:38-0500)
Run host:          numrel07.cct.lsu.edu (pid=12921)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-06-16-020001/Cactus/TEST/sim/ML_BSSN_Test
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-06-16-020001/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-06-16-020001/Cactus/arrangements/McLachlan/ML_BSSN_Test/test/ML_BSSN_NewRad.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->CoordBase SymBase Boundary NanChecker CartGrid3d Time MoL CarpetIOBasic CarpetIOScalar IOUtil Carpet CarpetLib CarpetReduce CarpetSlab CarpetIOASCII ADMBase StaticConformal SpaceMask Exact GenericFD CoordGauge ADMCoupling LoopControl ML_BSSN ML_BSSN_Helper GenericFD TMuNuBase SphericalSurface ADMMacros TimerReport NewRad<---
Warning: thorn GenericFD already scheduled for activation
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMCoupling...Success -> active implementation ADMCoupling
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3d...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn Exact...Success -> active implementation exact
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn ML_BSSN...Success -> active implementation ML_BSSN
Activating thorn ML_BSSN_Helper...Success -> active implementation ML_BSSN_Helper
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn NanChecker...Success -> active implementation NaNChecker
Activating thorn NewRad...Success -> active implementation NewRad
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn TimerReport...Success -> active implementation timerreport
Activating thorn TMuNuBase...Success -> active implementation TmunuBase
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CarpetLib::CarpetLib_registercycleclock: [global] Register cycle based timer
      ML_BSSN_Helper::ML_BSSN_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LoopControl::lc_check_type_sizes: [meta] Check that sizes of control structures are identical in C and Fortran
      ML_BSSN::ML_BSSN_Startup: [meta] create banner
      ML_BSSN_Helper::ML_BSSN_RegisterSlicing: [meta] Register slicing
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        ML_BSSN::ML_BSSN_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN_Helper::ML_BSSN_RegisterConstrained: [meta] Register ADMBase variables as constrained
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ML_BSSN::ML_BSSN_RegisterSymmetries: [meta] register symmetries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Exact::Exact_ParamCheck: [global] do consistency checks on our parameters
      MoL::MoL_ParamCheck: Basic parameter checking

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          Exact::Exact__decode_pars: decode/copy thorn Exact parameters into grid scalars
          Exact::Exact__initialize: Set initial data from exact solution on a trivial slice
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          Exact::Exact__gauge: Set initial lapse and/or shift from exact solution on a trivial slice
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        ML_BSSN::ML_BSSN_InitGamma: ML_BSSN_InitGamma
        ML_BSSN::ML_BSSN_convertFromADMBase: ML_BSSN_convertFromADMBase
        ML_BSSN::ML_BSSN_convertFromADMBaseGamma: ML_BSSN_convertFromADMBaseGamma
        MoL::MoL_StartLoop: [level] Initialise the step size control
        ML_BSSN_Helper::ML_BSSN_ExtrapolateGammas: Extrapolate Gammas and time derivatives of lapse and shift
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_BSSN::ML_BSSN_enforce: ML_BSSN_enforce
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_BSSN_constraints1_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1: ML_BSSN_constraints1
            GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
              ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
              GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2: ML_BSSN_constraints2
            GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
              ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
              GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
        ML_BSSN::ML_BSSN_InitRHS: ML_BSSN_InitRHS
        GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
          ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
          ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
          ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
          ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
          ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
        TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
                  ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
                  ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
                  ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
                  ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
                  ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 3 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_BSSN::ML_BSSN_enforce: ML_BSSN_enforce
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
                GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
                  GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
                    ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
                    ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
                    ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
                  ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
                  GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
                    GROUP BoundaryConditions: Execute all boundary conditions
                      Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                      CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_BSSN_constraints1_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1: ML_BSSN_constraints1
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2: ML_BSSN_constraints2
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
  if (checkpoint)
    [CCTK_CHECKPOINT]
      TimerReport::zzz_TimerReport_Checkpoint: [global] Print the timer report
  endif
  if (analysis)
    [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
      ML_BSSN::ML_BSSN_InitRHS: ML_BSSN_InitRHS
      GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
        ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
        ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
        ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
        ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
        ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::lc_printstats_terminate: [meta] Output loop control statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
Current core file size limit: hard=[unlimited], soft=0 MB
Current memory size limit: hard=[unlimited], soft=[unlimited]
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
ML_BSSN
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 4 threads, this is thread 0
INFO (Carpet): There are 8 threads in total
INFO (Carpet): There are 4 threads per process
INFO (Carpet): Host listing:
   host 0: "numrel07.cct.lsu.edu"
INFO (Carpet): Host/process mapping:
   processes 0-1: host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): Host mapping: This is process 0, host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): This process runs on host numrel07.cct.lsu.edu, pid=12921
INFO (Carpet): This process runs on 4 cores: 0-3
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): [tl=0] Boundary specification for map 0:
   nboundaryzones: [[5,5,5],[5,5,5]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,1,1],[0,0,0]]
INFO (Carpet): [tl=0] CoordBase domain specification for map 0:
   physical extent: [0,0,0] : [1,1,1]   ([1,1,1])
   interior extent: [0,0,0] : [0.9,0.9,0.9]   ([0.9,0.9,0.9])
   exterior extent: [-0.5,-0.5,-0.5] : [1.4,1.4,1.4]   ([1.9,1.9,1.9])
   base_spacing   : [0.1,0.1,0.1]
INFO (Carpet): [tl=0] Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [0,0,0] : [1,1,1]   ([1,1,1])
   interior extent   : [0,0,0] : [0.9,0.9,0.9]   ([0.9,0.9,0.9])
   exterior extent   : [-0.5,-0.5,-0.5] : [1.4,1.4,1.4]   ([1.9,1.9,1.9])
   spacing           : [0.1,0.1,0.1]
INFO (Carpet): [tl=0] Base grid specification for map 0:
   number of grid points             : [20,20,20]
   number of coarse grid ghost points: [[5,5,5],[5,5,5]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 370 grid functions in 55 groups
INFO (Carpet):    There are 86 grid scalars in 37 groups
INFO (Carpet):    There are 7 1-dimensional grid arrays in 3 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::kxx
   ML_BSSN::At11
   ML_BSSN::At12
   ML_BSSN::At13
   ML_BSSN::At22
   ML_BSSN::At23
   ML_BSSN::At33
   ML_BSSN::A
   ML_BSSN::B1
   ML_BSSN::B2
   ML_BSSN::B3
   ML_BSSN::Xt1
   ML_BSSN::Xt2
   ML_BSSN::Xt3
   ML_BSSN::alpha
   ML_BSSN::phi
   ML_BSSN::gt11
   ML_BSSN::gt12
   ML_BSSN::gt13
   ML_BSSN::gt22
   ML_BSSN::gt23
   ML_BSSN::gt33
   ML_BSSN::beta1
   ML_BSSN::beta2
   ML_BSSN::beta3
   ML_BSSN::trK
   ML_BSSN::At11rhs
   ML_BSSN::At12rhs
   ML_BSSN::At13rhs
   ML_BSSN::At22rhs
   ML_BSSN::At23rhs
   ML_BSSN::At33rhs
   ML_BSSN::Arhs
   ML_BSSN::B1rhs
   ML_BSSN::B2rhs
   ML_BSSN::B3rhs
   ML_BSSN::Xt1rhs
   ML_BSSN::Xt2rhs
   ML_BSSN::Xt3rhs
   ML_BSSN::alpharhs
   ML_BSSN::phirhs
   ML_BSSN::gt11rhs
   ML_BSSN::gt12rhs
   ML_BSSN::gt13rhs
   ML_BSSN::gt22rhs
   ML_BSSN::gt23rhs
   ML_BSSN::gt33rhs
   ML_BSSN::beta1rhs
   ML_BSSN::beta2rhs
   ML_BSSN::beta3rhs
   ML_BSSN::trKrhs
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Runge-Kutta 3 as the time integrator.
INFO (MoL): The maximum number of evolved variables is 25. 25 are registered.
INFO (MoL): The maximum number of constrained variables is 20. 20 are registered.
INFO (MoL): The maximum number of SandR variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (ADMMacros): Spatial finite differencing order: 2
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.0000000e-01  dy=>1.0000000e-01  dz=>1.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-0.500, 1.400]  y=>[-0.500, 1.400]  z=>[-0.500, 1.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,19]  y=>[0,19]  z=>[0,19]
INFO (Time): Timestep set to 0.025 (courant_static)
INFO (Exact): setting exact data on slice
------------------------------------------------------------
Iteration      Time |                           ML_BSSN::phi
                    |        norm2      minimum      maximum
------------------------------------------------------------
        0     0.000 |    1.0005581    0.9849723    1.0167957
        1     0.025 |    1.0005404    0.9836314    1.0184108
        2     0.050 |    1.0005381    0.9818999    1.0207347
        3     0.075 |    1.0006232    0.9764190    1.0284438
        4     0.100 |    1.0008614    0.9702203    1.0356876
        5     0.125 |    1.0012741    0.9615391    1.0428150
        6     0.150 |    1.0018265    0.9547657    1.0530173
        7     0.175 |    1.0024399    0.9511057    1.0598208
        8     0.200 |    1.0030168    0.9473642    1.0617501
LoopControl timing statistics:
Loop #0 "ML_BSSN_Advect":
   total count: 104   total setup: 0.227853   total calc: 0.273255
   avg calc: 0.00262745   avg first calc: 0.00248301
   avg improvement: -6%   saved: -0.0150212 seconds
Loop #1 "ML_BSSN_Dissipation":
   total count: 104   total setup: 0.212969   total calc: 0.228401
   avg calc: 0.00219616   avg first calc: 0.00205869
   avg improvement: -7%   saved: -0.0142976 seconds
Loop #2 "ML_BSSN_RHS2":
   total count: 104   total setup: 0.211184   total calc: 0.271036
   avg calc: 0.00260611   avg first calc: 0.00245848
   avg improvement: -6%   saved: -0.0153537 seconds
Loop #3 "ML_BSSN_RHS1":
   total count: 104   total setup: 0.208107   total calc: 0.230507
   avg calc: 0.00221641   avg first calc: 0.00206425
   avg improvement: -7%   saved: -0.0158243 seconds
Loop #4 "ML_BSSN_convertToADMBaseDtLapseShiftBoundary":
   total count: 2600   total setup: 4.97403   total calc: 3.74355
   avg calc: 0.00143983   avg first calc: 0.00131391
   avg improvement: -10%   saved: -0.327373 seconds
Loop #5 "ML_BSSN_convertToADMBaseDtLapseShift":
   total count: 104   total setup: 0.196182   total calc: 0.163609
   avg calc: 0.00157316   avg first calc: 0.00142876
   avg improvement: -10%   saved: -0.0150177 seconds
Loop #6 "ML_BSSN_convertToADMBase":
   total count: 104   total setup: 0.238553   total calc: 0.312618
   avg calc: 0.00300594   avg first calc: 0.00279068
   avg improvement: -8%   saved: -0.0223872 seconds
Loop #7 "ML_BSSN_enforce":
   total count: 100   total setup: 0.238464   total calc: 0.295199
   avg calc: 0.00295199   avg first calc: 0.00270373
   avg improvement: -9%   saved: -0.0248252 seconds
Total calculation time: 5.89907 seconds; total saved time: -0.4501 seconds
INFO (TimerReport): Timer Report before terminating at iteration 8 time 0.2
INFO (TimerReport): Top timers at iteration 8 time 0.2
======================================================================
    %    Time/s   Min/s   Max/s   Timer (gettimeofday)
======================================================================
100.0   7.71889 7.68194 7.75584   main/Evolve
 96.3   7.43595 7.42764 7.44425   main/Evolve/CallEvol
 96.0   7.40759 7.39993 7.41525   main/Evolve/CallEvol/CCTK_EVOL
 95.9   7.39908 7.39137 7.40679   main/Evolve/CallEvol/CCTK_EVOL/CallFunction
 68.3   5.27422 5.14730 5.40115   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns
 36.3   2.80370 2.76475 2.84264   [0125] ML_BSSN: ML_BSSN_convertToADMBaseDtLapseShiftBoundary in CCTK_EVOL
 36.3   2.80073 2.76183 2.83964   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_convertToADMBaseDtLapseShiftBoundary
 27.0   2.08562 1.96587 2.20538   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/syncs
 27.0   2.08362 1.96366 2.20357   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/syncs/Sync
 19.5   1.50299 1.49032 1.51566   [0119] ML_BSSN: ML_BSSN_SelectBoundConds in CCTK_EVOL
 13.8   1.06760 1.03075 1.10446   main/Initialise
 13.0   1.00004 1.00004 1.00005   [0001] CarpetLib: CarpetLib_registercycleclock in CCTK_STARTUP
  8.9   0.68534 0.68199 0.68869   main/Initialise/CallInitial
  7.3   0.56564 0.53478 0.59649   [0115] MoL: MoL_Add in CCTK_EVOL
  7.3   0.56153 0.53078 0.59229   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/MoL_Add
  7.0   0.54214 0.40902 0.67526   [0124] ML_BSSN: ML_BSSN_convertToADMBaseDtLapseShift in CCTK_EVOL
  6.6   0.51022 0.47525 0.54519   [0109] MoL: MoL_InitRHS in CCTK_EVOL
  6.6   0.50784 0.47293 0.54275   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/MoL_InitRHS
  4.3   0.32886 0.32381 0.33391   main/Initialise/CallInitial/CCTK_INITIAL
  4.3   0.32863 0.32356 0.33369   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction
  4.0   0.30794 0.30713 0.30875   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns
  3.5   0.27288 0.26621 0.27956   main/Initialise/CallInitial/CCTK_POSTINITIAL
  3.5   0.27078 0.26576 0.27581   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction
  3.1   0.24148 0.24096 0.24201   main/Initialise/CallRestrict
  3.1   0.24128 0.24079 0.24178   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL
  3.1   0.24082 0.24033 0.24132   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL/CallFunction
  2.9   0.22493 0.19747 0.25240   main/Evolve/CallAnalysis
  2.3   0.17526 0.16702 0.18349   [0123] ML_BSSN: ML_BSSN_convertToADMBase in CCTK_EVOL
  2.3   0.17372 0.16541 0.18203   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_convertToADMBase
  2.2   0.17350 0.17222 0.17478   [0118] ML_BSSN: ML_BSSN_enforce in CCTK_EVOL
  2.2   0.16997 0.16891 0.17104   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_enforce
  2.2   0.16697 0.16028 0.17366   [0113] ML_BSSN: ML_BSSN_Advect in CCTK_EVOL
  2.2   0.16611 0.16476 0.16745   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns
  2.1   0.16407 0.15753 0.17062   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_Advect
  2.0   0.15618 0.15381 0.15855   [0111] ML_BSSN: ML_BSSN_RHS2 in CCTK_EVOL
  2.0   0.15392 0.15155 0.15629   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_RHS2
  2.0   0.15246 0.14898 0.15594   [0110] ML_BSSN: ML_BSSN_RHS1 in CCTK_EVOL
  2.0   0.15119 0.14826 0.15413   [0112] ML_BSSN: ML_BSSN_Dissipation in CCTK_EVOL
  1.9   0.15007 0.14678 0.15335   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_RHS1
  1.9   0.14847 0.14582 0.15113   main/Evolve/CallEvol/CCTK_EVOL/CallFunction/thorns/ML_BSSN_Dissipation
======================================================================
--------------------------------------------------------------------------------
Done.
