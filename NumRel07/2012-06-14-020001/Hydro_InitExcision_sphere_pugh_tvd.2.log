/home/jhar131/TESTING/einsteintoolkit/2012-06-14-020001/Cactus/TEST/sim/Hydro_InitExcision
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      Jun 14 2012 (02:50:27)
Run date:          Jun 14 2012 (03:36:50-0500)
Run host:          numrel07.cct.lsu.edu (pid=32535)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-06-14-020001/Cactus/TEST/sim/Hydro_InitExcision
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-06-14-020001/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-06-14-020001/Cactus/arrangements/EinsteinInitialData/Hydro_InitExcision/test/sphere_pugh_tvd.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->ADMMacros<---
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activation requested for 
--->pugh pughreduce pughslab localreduce<---
Activating thorn localreduce...Success -> active implementation LocalReduce
Activating thorn pugh...Success -> active implementation Driver
Activating thorn pughreduce...Success -> active implementation Reduce
Activating thorn pughslab...Success -> active implementation Hyperslab
Activation requested for 
--->coordbase symbase cartgrid3d boundary<---
Activating thorn boundary...Success -> active implementation boundary
Activating thorn cartgrid3d...Success -> active implementation grid
Activating thorn coordbase...Success -> active implementation CoordBase
Activating thorn symbase...Success -> active implementation SymBase
Activation requested for 
--->time<---
Activating thorn time...Success -> active implementation time
Activation requested for 
--->ioutil ioascii iobasic<---
Activating thorn ioascii...Success -> active implementation IOASCII
Activating thorn iobasic...Success -> active implementation IOBasic
Activating thorn ioutil...Success -> active implementation IO
Activation requested for 
--->ADMConstraints admbase admcoupling spacemask staticconformal<---
Activating thorn admbase...Success -> active implementation ADMBase
Activating thorn ADMConstraints...Success -> active implementation admconstraints
Activating thorn admcoupling...Success -> active implementation ADMCoupling
Activating thorn spacemask...Success -> active implementation SpaceMask
Activating thorn staticconformal...Success -> active implementation StaticConformal
Activation requested for 
--->nanchecker mol<---
Activating thorn mol...Success -> active implementation MethodOfLines
Activating thorn nanchecker...Success -> active implementation NaNChecker
Activation requested for 
--->ADMBase StaticConformal SpaceMask CoordGauge ADMMacros ADMCoupling<---
Warning: thorn ADMBase already active
Warning: thorn StaticConformal already active
Warning: thorn SpaceMask already active
Warning: thorn ADMMacros already active
Warning: thorn ADMCoupling already active
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activation requested for 
--->eos_omni<---
Activating thorn eos_omni...Success -> active implementation EOS_Omni
Activation requested for 
--->tmunubase hydrobase grhydro initbase<---
Activating thorn grhydro...Success -> active implementation GRHydro
Activating thorn hydrobase...Success -> active implementation HydroBase
Activating thorn initbase...Success -> active implementation InitBase
Activating thorn tmunubase...Success -> active implementation TmunuBase
Activation requested for 
--->grhydro_initdata<---
Activating thorn grhydro_initdata...Success -> active implementation GRHydro_init_data
Activation requested for 
--->hydro_initexcision<---
Activating thorn hydro_initexcision...Success -> active implementation Hydro_InitExcision
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      GRHydro::GRHydro_RegisterMask: Register the hydro masks
      HydroBase::HydroBase_StartUp: Startup banner
      PUGH::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      IOASCII::IOASCII_Startup: Startup routine
      LocalReduce::LocalReduce_Startup: Startup routine
      MoL::MoL_Startup: Startup banner
      IOBasic::IOBasic_Startup: Startup routine
      PUGH::PUGH_RegisterPUGHP2LRoutines: Register Physical to Logical process mapping routines
      PUGH::PUGH_RegisterPUGHTopologyRoutines: Register topology generation routines routines
      PUGHReduce::PUGHReduce_Startup: Startup routine
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      ADMConstraints::ADMConstraint_InitSymBound: [global] Register GF symmetries for ADM Constraints
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      EOS_Omni::EOS_Omni_Startup: [global] Set up conversion factors and other fun stuff
      GRHydro::GRHydro_Startup: Startup banner
      GRHydro::GRHydro_ClearLastMoLPostStep: [global] Initialize InLastMoLPostStep to zero
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        GRHydro::GRHydro_Register: Register variables for MoL
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      SpaceMask::MaskSym: [global] Set grid symmetries for mask
      SpaceMask::MaskSym_emask: [global] Set grid symmetries for emask (compatibility mode)
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      ADMConstraints::ADMConstraints_ParamCheck: [global] Check that we can deal with this metric_type and have enough conformal derivatives
      Boundary::Boundary_Check: Check dimension of grid variables
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      GRHydro::GRHydro_ParamCheck: Check parameters
      GRHydro_InitData::GRHydro_InitData_CheckParameters: Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set mask to one
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOff: Set the dtshift_state variable to 0
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        IOASCII::IOASCII_Choose1D: Choose 1D output lines
        IOASCII::IOASCII_Choose2D: Choose 2D output planes
        PUGH::PUGH_Report: Report on PUGH set up
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          ADMBase::ADMBase_CartesianMinkowski: Set the metric and extrinsic curvature to cartesian minkowski values
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        GRHydro::GRHydro_Rho_Minima_Setup: Set up minimum for the rest-mass density in the atmosphere (before intial data)
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          ADMBase::ADMBase_LapseOne: Set the lapse to 1 at all points
          ADMBase::ADMBase_ShiftZero: Set the shift to 0 at all points
        GROUP HydroBase_Initial: HydroBase initial data group
          GROUP GRHydro_Initial: GRHydro initial data group
          GRHydro_InitData::GRHydro_shocktube: Shocktube initial data
          GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
            HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP HydroBase_Prim2ConInitial: Recover the conservative variables from the primitive variables
          GRHydro::Primitive2ConservativeCells: Convert initial data given in primive variables to conserved variables
        Hydro_InitExcision::Hydro_InitExcisionMask: Sets up the excision mask
        IOBasic::IOBasic_Init: Initialisation routine
        MoL::MoL_StartLoop: [level] Initialise the step size control
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        GROUP SetTmunu: Calculate the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      [CCTK_POSTINITIAL]
        ADMConstraints::ADMConstraints_ConformalCheck: Set conformal_state to 0 for physical, or check that it is at least 3
        GRHydro::GRHydro_Rho_Minima_Setup_Final_PUGH: Set the value of the rest-mass density of the atmosphere which will be used during the evolution (PUGH)
        GRHydro::GRHydro_InitialAtmosphereReset: Use mask to enforce atmosphere at initial time
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
        GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
             if (GRHydro::InLastMoLPostStep)
          GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              GRHydro::Con2Prim: Convert back to primitive variables (general)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP ADMConstraintsGroup: Evaluate ADM constraints, and perform symmetry boundary conditions
          ADMConstraints::ADMConstraints: Evaluate ADM constraints
          GROUP ADMConstraintsBoundariesGroup: Set ADM constraints on the boundary
            ADMConstraints::ADMConstraints_Boundaries: [level] Select boundary conditions for the ADM constraints
            GROUP ADMConstraints_ApplyBCs: Apply boundary conditions to the ADM constraints
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
             if (GRHydro::InLastMoLPostStep)
          GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              GRHydro::Con2Prim: Convert back to primitive variables (general)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
      [CCTK_POSTPOSTINITIAL]
        GROUP Con2Prim: Convert from conservative to primitive variables (might be redundant)
          GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Calculate the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP ADMConstraintsGroup: Evaluate ADM constraints, and perform symmetry boundary conditions
          ADMConstraints::ADMConstraints: Evaluate ADM constraints
          GROUP ADMConstraintsBoundariesGroup: Set ADM constraints on the boundary
            ADMConstraints::ADMConstraints_Boundaries: [level] Select boundary conditions for the ADM constraints
            GROUP ADMConstraints_ApplyBCs: Apply boundary conditions to the ADM constraints
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTSTEP]
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
        GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
        GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
        Hydro_InitExcision::Hydro_InitExcisionMask_poststep: Sets up the excision mask
        SpaceMask::CheckMask: Ensure that all mask values are legal
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOff: Set the dtshift_state variable to 0
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        IOASCII::IOASCII_Choose1D: Choose 1D output lines
        IOASCII::IOASCII_Choose2D: Choose 2D output planes
        PUGH::PUGH_Report: Report on PUGH set up
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
             if (GRHydro::InLastMoLPostStep)
          GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              GRHydro::Con2Prim: Convert back to primitive variables (general)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        Hydro_InitExcision::Hydro_InitExcisionMask: Sets up the excision mask
        GROUP ADMConstraintsGroup: Evaluate ADM constraints, and perform symmetry boundary conditions
          ADMConstraints::ADMConstraints: Evaluate ADM constraints
          GROUP ADMConstraintsBoundariesGroup: Set ADM constraints on the boundary
            ADMConstraints::ADMConstraints_Boundaries: [level] Select boundary conditions for the ADM constraints
            GROUP ADMConstraints_ApplyBCs: Apply boundary conditions to the ADM constraints
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      SpaceMask::MaskZero: Initialise mask to zero
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      SpaceMask::MaskOne: Set mask to one
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      Hydro_InitExcision::Hydro_InitExcisionMask: Sets up the excision mask
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
           if (GRHydro::InLastMoLPostStep)
        GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP ADMConstraintsBoundariesGroup: Set ADM constraints on the boundary
        ADMConstraints::ADMConstraints_Boundaries: [level] Select boundary conditions for the ADM constraints
        GROUP ADMConstraints_ApplyBCs: Apply boundary conditions to the ADM constraints
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      ADMBase::ADMBase_LapseStatic: Copy the lapse to the current time level
      ADMBase::ADMBase_ShiftStatic: Copy the shift to the current time level
      ADMBase::ADMBase_Static: Copy the metric and extrinsic curvature to the current time level
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      GRHydro::reset_GRHydro_C2P_failed: Reset the mask function that contains the points where C2P has failed (at PRESTEP)
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
            GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                GROUP HydroBase_RHS: Groups for scheduling tasks for calculating RHS of hydro variables
                  GROUP GRHydroRHS: Calculate the update terms
                    GRHydro::SourceTerms: Source term calculation
                    GRHydro::GRHydroStartLoop: [level] Set the flux_direction variable
                    while (GRHydro::flux_direction)
                      GROUP FluxTerms: Calculation of intercell fluxes
                        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                        GRHydro::Reconstruct: Reconstruct the functions at the cell boundaries
                        GRHydro::Riemann: Solve the local Riemann problems
                        GRHydro::UpdateCalcul: Calculate the update term from the fluxes
                        GRHydro::GRHydroAdvanceLoop: [level] Decrement the flux_direction variable
                    end while
                    GRHydro::GRHydroUpdateAtmosphereMask: Alter the update terms if inside the atmosphere region
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 2 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
                GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
                GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
                   if (GRHydro::InLastMoLPostStep)
                GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
                GROUP HydroBase_PostStep: Post step tasks for hydro thorns
                  GROUP GRHydro_PostStep: Post step tasks for GRHydro
                  GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
                    GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
                    GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                      GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
                    GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
                    GRHydro::Con2Prim: Convert back to primitive variables (general)
                GROUP SetTmunu: Group for calculating the stress-energy tensor
                  TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
                  GROUP AddToTmunu: Add to the stress-energy tensor here
                    GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
              GRHydro::GRHydro_ClearLastMoLPostStep: [level] Reset InLastMoLPostStep to zero
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
      end while
      GRHydro::sync_GRHydro_C2P_failed: Syncronise the mask function that contains the points where C2P has failed
      GROUP ADMConstraintsGroup: Evaluate ADM constraints, and perform symmetry boundary conditions
        ADMConstraints::ADMConstraints: Evaluate ADM constraints
        GROUP ADMConstraintsBoundariesGroup: Set ADM constraints on the boundary
          ADMConstraints::ADMConstraints_Boundaries: [level] Select boundary conditions for the ADM constraints
          GROUP ADMConstraints_ApplyBCs: Apply boundary conditions to the ADM constraints
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
           if (GRHydro::InLastMoLPostStep)
        GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP ADMConstraintsBoundariesGroup: Set ADM constraints on the boundary
        ADMConstraints::ADMConstraints_Boundaries: [level] Select boundary conditions for the ADM constraints
        GROUP ADMConstraints_ApplyBCs: Apply boundary conditions to the ADM constraints
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
    [CCTK_POSTSTEP]
      GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
      GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
      GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
      Hydro_InitExcision::Hydro_InitExcisionMask_poststep: Sets up the excision mask
      SpaceMask::CheckMask: Ensure that all mask values are legal
  if (checkpoint)
    [CCTK_CHECKPOINT]
  endif
  if (analysis)
    [CCTK_ANALYSIS]
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      PUGH::Driver_Terminate: Termination routine

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      SpaceMask::MaskZero: Initialise mask to zero
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      SpaceMask::MaskOne: Set mask to one
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      Hydro_InitExcision::Hydro_InitExcisionMask: Sets up the excision mask
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
           if (GRHydro::InLastMoLPostStep)
        GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            GRHydro::Con2Prim: Convert back to primitive variables (general)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP ADMConstraintsBoundariesGroup: Set ADM constraints on the boundary
        ADMConstraints::ADMConstraints_Boundaries: [level] Select boundary conditions for the ADM constraints
        GROUP ADMConstraints_ApplyBCs: Apply boundary conditions to the ADM constraints
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
--------------------------------------------------------------------------------
INFO (PUGH): Using physical to logical mappings: direct
INFO (PUGH): Using topology generator: automatic
--------------------------------------------------------------------------------
HydroBase: Let it flow.
--------------------------------------------------------------------------------
Driver provided by PUGH
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

INFO (PUGH): Not setting up a topology for 1 dimensions
INFO (PUGH): Not setting up a topology for 2 dimensions
INFO (PUGH): Setting up a topology for 3 dimensions
INFO (IOASCII): I/O Method 'IOASCII_1D' registered: output of 1D lines of grid functions/arrays to ASCII files
INFO (IOASCII): Periodic 1D output every 10 iterations
INFO (IOASCII): Periodic 1D output requested for 'GRHYDRO::dens', 'GRHYDRO::tau', 'GRHYDRO::scon[0]', 'GRHYDRO::scon[1]', 'GRHYDRO::scon[2]', 'HYDROBASE::rho', 'HYDROBASE::press', 'HYDROBASE::eps', 'HYDROBASE::vel[0]', 'HYDROBASE::vel[1]', 'HYDROBASE::vel[2]', 'HYDROBASE::w_lorentz'
INFO (IOASCII): I/O Method 'IOASCII_2D' registered: output of 2D planes of grid functions/arrays to ASCII files
INFO (IOASCII): Periodic 2D output every 25 iterations
INFO (IOASCII): Periodic 2D output requested for 'HYDROBASE::rho'
INFO (IOASCII): I/O Method 'IOASCII_3D' registered: output of 3D grid functions/arrays to ASCII files
INFO (IOASCII): Periodic 3D output turned off
INFO (IOBasic): I/O Method 'Scalar' registered: output of scalar quantities (grid scalars, reductions) to ASCII files
INFO (IOBasic): I/O Method 'Info' registered: output of scalar quantities (grid scalars, reductions) to screen
INFO (MoL): Using Runge-Kutta 2 as the time integrator.
INFO (MoL): The maximum number of evolved variables is 5. 5 are registered.
INFO (MoL): The maximum number of constrained variables is 27. 17 are registered.
INFO (MoL): The maximum number of SandR variables is 16. 16 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (ADMMacros): Spatial finite differencing order: 2
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>5.0000000e-01  dy=>5.0000000e-01  dz=>5.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-9.500, 9.500]  y=>[-9.500, 9.500]  z=>[-9.500, 9.500]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,38]  y=>[0,38]  z=>[0,38]
INFO (PUGH): MPI Evolution on 2 processors
INFO (PUGH): 3-dimensional grid functions
INFO (PUGH):   Size: 39 39 39
INFO (PUGH):   Processor topology: 2 x 1 x 1
INFO (PUGH):   Local load: 33462   [22 x 39 x 39]
INFO (PUGH):   Maximum load skew: 4.000000
INFO (Time): Timestep set to 0.125 (courant_static)
INFO (GRHydro): Trying to get EOS handles
INFO (EOS_Omni): GetHandle
INFO (GRHydro): Trying to get EOS handles
INFO (EOS_Omni): GetHandle
INFO (EOS_Omni): GetHandle
INFO (GRHydro): GRHydro will use the Ideal_Fluid equation of state.
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (Hydro_InitExcision): Setting up Hydro Initial Excision region.
INFO (IOBasic): Periodic scalar output requested for 'GRHYDRO::dens', 'GRHYDRO::tau', 'GRHYDRO::scon[0]', 'GRHYDRO::scon[1]', 'GRHYDRO::scon[2]', 'HYDROBASE::rho', 'HYDROBASE::press', 'HYDROBASE::eps', 'HYDROBASE::vel[0]', 'HYDROBASE::vel[1]', 'HYDROBASE::vel[2]', 'HYDROBASE::w_lorentz'
INFO (IOBasic): Periodic info output requested for 'HYDROBASE::rho'
-------------------------------------------------
   it  |          | HYDROBASE::rho              |
       |    t     | minimum      | maximum      |
-------------------------------------------------
     0 |    0.000 |   1.00000000 |  10.00000000 |
     1 |    0.125 |   0.00000001 |  10.00000000 |
     2 |    0.250 |   0.00000001 |  10.00000000 |
     3 |    0.375 |   0.00000001 |  10.00000000 |
     4 |    0.500 |   0.00000001 |   9.99999991 |
     5 |    0.625 |   0.00000001 |   9.99999914 |
     6 |    0.750 |   0.00000001 |   9.99999573 |
     7 |    0.875 |   0.00000001 |   9.99998498 |
     8 |    1.000 |   0.00000001 |   9.99995747 |
     9 |    1.125 |   0.00000001 |   9.99989662 |
    10 |    1.250 |   0.00000001 |   9.99977566 |
    11 |    1.375 |   0.00000001 |   9.99955429 |
    12 |    1.500 |   0.00000001 |   9.99917503 |
    13 |    1.625 |   0.00000001 |   9.99855950 |
    14 |    1.750 |   0.00000001 |   9.99760475 |
    15 |    1.875 |   0.00000001 |   9.99618000 |
    16 |    2.000 |   0.00000001 |   9.99412386 |
    17 |    2.125 |   0.00000001 |   9.99124236 |
    18 |    2.250 |   0.00000001 |   9.98730802 |
    19 |    2.375 |   0.00000001 |   9.98205998 |
    20 |    2.500 |   0.00000001 |   9.97520524 |
    21 |    2.625 |   0.00000001 |   9.96642110 |
    22 |    2.750 |   0.00000001 |   9.95535898 |
    23 |    2.875 |   0.00000001 |   9.94164973 |
    24 |    3.000 |   0.00000001 |   9.92490984 |
    25 |    3.125 |   0.00000001 |   9.90474831 |
    26 |    3.250 |   0.00000001 |   9.88077455 |
    27 |    3.375 |   0.00000001 |   9.85260729 |
    28 |    3.500 |   0.00000001 |   9.81988381 |
    29 |    3.625 |   0.00000001 |   9.78226984 |
    30 |    3.750 |   0.00000001 |   9.73946931 |
    31 |    3.875 |   0.00000001 |   9.69123147 |
    32 |    4.000 |   0.00000001 |   9.63734987 |
    33 |    4.125 |   0.00000001 |   9.57766055 |
    34 |    4.250 |   0.00000001 |   9.51170793 |
    35 |    4.375 |   0.00000001 |   9.43853232 |
    36 |    4.500 |   0.00000001 |   9.35783469 |
    37 |    4.625 |   0.00000001 |   9.26889282 |
    38 |    4.750 |   0.00000001 |   9.17146623 |
    39 |    4.875 |   0.00000001 |   9.06649294 |
    40 |    5.000 |   0.00000001 |   8.95519895 |
    41 |    5.125 |   0.00000001 |   8.83876004 |
    42 |    5.250 |   0.00000001 |   8.71823651 |
    43 |    5.375 |   0.00000001 |   8.59458692 |
    44 |    5.500 |   0.00000001 |   8.46880546 |
    45 |    5.625 |   0.00000001 |   8.34187613 |
    46 |    5.750 |   0.00000001 |   8.21470806 |
    47 |    5.875 |   0.00000001 |   8.08811136 |
    48 |    6.000 |   0.00000001 |   7.96278615 |
    49 |    6.125 |   0.00000001 |   7.83931950 |
    50 |    6.250 |   0.00000001 |   7.71819016 |
    51 |    6.375 |   0.00000001 |   7.59977860 |
    52 |    6.500 |   0.00000001 |   7.48437779 |
    53 |    6.625 |   0.00000001 |   7.37220258 |
    54 |    6.750 |   0.00000001 |   7.26339964 |
    55 |    6.875 |   0.00000001 |   7.15805715 |
    56 |    7.000 |   0.00000001 |   7.05621375 |
    57 |    7.125 |   0.00000001 |   6.95786689 |
    58 |    7.250 |   0.00000001 |   6.86298042 |
    59 |    7.375 |   0.00000001 |   6.77149168 |
    60 |    7.500 |   0.00000001 |   6.68331788 |
    61 |    7.625 |   0.00000001 |   6.59836152 |
    62 |    7.750 |   0.00000001 |   6.51651475 |
    63 |    7.875 |   0.00000001 |   6.43766492 |
    64 |    8.000 |   0.00000001 |   6.36169329 |
    65 |    8.125 |   0.00000001 |   6.28848025 |
    66 |    8.250 |   0.00000001 |   6.21790765 |
    67 |    8.375 |   0.00000001 |   6.14985875 |
    68 |    8.500 |   0.00000001 |   6.08422060 |
    69 |    8.625 |   0.00000001 |   6.02088561 |
    70 |    8.750 |   0.00000001 |   5.95975215 |
    71 |    8.875 |   0.00000001 |   5.90072451 |
    72 |    9.000 |   0.00000001 |   5.84371240 |
    73 |    9.125 |   0.00000001 |   5.78863101 |
    74 |    9.250 |   0.00000001 |   5.73540071 |
    75 |    9.375 |   0.00000001 |   5.68394640 |
    76 |    9.500 |   0.00000001 |   5.63419655 |
    77 |    9.625 |   0.00000001 |   5.58608298 |
    78 |    9.750 |   0.00000001 |   5.53954040 |
    79 |    9.875 |   0.00000001 |   5.49450649 |
    80 |   10.000 |   0.00000001 |   5.45092188 |
    81 |   10.125 |   0.00000001 |   5.40872927 |
    82 |   10.250 |   0.00000001 |   5.36787311 |
    83 |   10.375 |   0.00000001 |   5.32829857 |
    84 |   10.500 |   0.00000001 |   5.28995206 |
    85 |   10.625 |   0.00000001 |   5.25278087 |
    86 |   10.750 |   0.00000001 |   5.21673302 |
    87 |   10.875 |   0.00000001 |   5.18175753 |
    88 |   11.000 |   0.00000001 |   5.14780460 |
    89 |   11.125 |   0.00000001 |   5.11482586 |
    90 |   11.250 |   0.00000001 |   5.08277424 |
    91 |   11.375 |   0.00000001 |   5.33471353 |
    92 |   11.500 |   0.00000001 |   6.09349219 |
    93 |   11.625 |   0.00000001 |   6.79873733 |
    94 |   11.750 |   0.00000001 |   7.43655930 |
    95 |   11.875 |   0.00000001 |   7.99115710 |
    96 |   12.000 |   0.00000001 |   8.44935208 |
    97 |   12.125 |   0.00000001 |   8.79886162 |
    98 |   12.250 |   0.00000001 |   9.03333175 |
    99 |   12.375 |   0.00000001 |   9.16556930 |
   100 |   12.500 |   0.00000001 |   9.21156627 |
   101 |   12.625 |   0.00000001 |   9.18197545 |
   102 |   12.750 |   0.00000001 |   9.08771999 |
   103 |   12.875 |   0.00000001 |   8.94059162 |
   104 |   13.000 |   0.00000001 |   8.95207288 |
   105 |   13.125 |   0.00000001 |   8.96480934 |
   106 |   13.250 |   0.00000001 |   8.87722632 |
   107 |   13.375 |   0.00000001 |   8.94477155 |
   108 |   13.500 |   0.00000001 |   9.01366987 |
   109 |   13.625 |   0.00000001 |   8.96009647 |
   110 |   13.750 |   0.00000001 |   8.82099025 |
   111 |   13.875 |   0.00000001 |   8.82876024 |
   112 |   14.000 |   0.00000001 |   8.86815779 |
   113 |   14.125 |   0.00000001 |   8.80495180 |
   114 |   14.250 |   0.00000001 |   8.66813399 |
   115 |   14.375 |   0.00000001 |   8.55765424 |
   116 |   14.500 |   0.00000001 |   8.60013957 |
   117 |   14.625 |   0.00000001 |   8.55392556 |
   118 |   14.750 |   0.00000001 |   8.44111437 |
   119 |   14.875 |   0.00000001 |   8.27775399 |
   120 |   15.000 |   0.00000001 |   8.25761207 |
   121 |   15.125 |   0.00000001 |   8.24815520 |
   122 |   15.250 |   0.00000001 |   8.17860127 |
   123 |   15.375 |   0.00000001 |   8.06432268 |
   124 |   15.500 |   0.00000001 |   7.91671287 |
   125 |   15.625 |   0.00000001 |   7.91795875 |
   126 |   15.750 |   0.00000001 |   7.89885991 |
   127 |   15.875 |   0.00000001 |   7.83375487 |
   128 |   16.000 |   0.00000001 |   7.73152185 |
   129 |   16.125 |   0.00000001 |   7.59875991 |
   130 |   16.250 |   0.00000001 |   7.60924964 |
   131 |   16.375 |   0.00000001 |   7.59180822 |
   132 |   16.500 |   0.00000001 |   7.53302337 |
   133 |   16.625 |   0.00000001 |   7.43873509 |
   134 |   16.750 |   0.00000001 |   7.31538522 |
   135 |   16.875 |   0.00000001 |   7.33957498 |
   136 |   17.000 |   0.00000001 |   7.32186689 |
   137 |   17.125 |   0.00000001 |   7.26547447 |
   138 |   17.250 |   0.00000001 |   7.17605179 |
   139 |   17.375 |   0.00000001 |   7.05863648 |
   140 |   17.500 |   0.00000001 |   7.05612895 |
   141 |   17.625 |   0.00000001 |   7.02768861 |
   142 |   17.750 |   0.00000001 |   6.96615067 |
   143 |   17.875 |   0.00000001 |   6.87491281 |
   144 |   18.000 |   0.00000001 |   6.75734382 |
   145 |   18.125 |   0.00000001 |   6.61793016 |
   146 |   18.250 |   0.00000001 |   6.45960689 |
   147 |   18.375 |   0.00000001 |   6.46062758 |
   148 |   18.500 |   0.00000001 |   6.45628851 |
   149 |   18.625 |   0.00000001 |   6.42897785 |
   150 |   18.750 |   0.00000001 |   6.37948749 |
   151 |   18.875 |   0.00000001 |   6.30601713 |
   152 |   19.000 |   0.00000001 |   6.21197305 |
   153 |   19.125 |   0.00000001 |   6.10386731 |
   154 |   19.250 |   0.00000001 |   5.98686706 |
   155 |   19.375 |   0.00000001 |   5.86496221 |
   156 |   19.500 |   0.00000001 |   5.74130365 |
   157 |   19.625 |   0.00000001 |   5.61822963 |
   158 |   19.750 |   0.00000001 |   5.49745528 |
   159 |   19.875 |   0.00000001 |   5.38007190 |
   160 |   20.000 |   0.00000001 |   5.26657687 |
   161 |   20.125 |   0.00000001 |   5.15726489 |
   162 |   20.250 |   0.00000001 |   5.05229085 |
   163 |   20.375 |   0.00000001 |   4.95161350 |
   164 |   20.500 |   0.00000001 |   4.85498837 |
   165 |   20.625 |   0.00000001 |   4.76224984 |
   166 |   20.750 |   0.00000001 |   4.67318293 |
   167 |   20.875 |   0.00000001 |   4.58747635 |
   168 |   21.000 |   0.00000001 |   4.50498331 |
   169 |   21.125 |   0.00000001 |   4.42584556 |
   170 |   21.250 |   0.00000001 |   4.35019908 |
   171 |   21.375 |   0.00000001 |   4.30116028 |
   172 |   21.500 |   0.00000001 |   4.25948320 |
   173 |   21.625 |   0.00000001 |   4.21948645 |
   174 |   21.750 |   0.00000001 |   4.18092431 |
   175 |   21.875 |   0.00000001 |   4.14357939 |
   176 |   22.000 |   0.00000001 |   4.10723926 |
   177 |   22.125 |   0.00000001 |   4.07173355 |
   178 |   22.250 |   0.00000001 |   4.03691974 |
   179 |   22.375 |   0.00000001 |   4.00269922 |
   180 |   22.500 |   0.00000001 |   3.96905666 |
   181 |   22.625 |   0.00000001 |   3.93572273 |
   182 |   22.750 |   0.00000001 |   3.90251224 |
   183 |   22.875 |   0.00000001 |   3.86943436 |
   184 |   23.000 |   0.00000001 |   3.83656677 |
   185 |   23.125 |   0.00000001 |   3.80399214 |
   186 |   23.250 |   0.00000001 |   3.77168614 |
   187 |   23.375 |   0.00000001 |   3.75930098 |
   188 |   23.500 |   0.00000001 |   3.75335263 |
   189 |   23.625 |   0.00000001 |   3.74746924 |
   190 |   23.750 |   0.00000001 |   3.74165156 |
   191 |   23.875 |   0.00000001 |   3.73589690 |
   192 |   24.000 |   0.00000001 |   3.73020458 |
   193 |   24.125 |   0.00000001 |   3.72457386 |
   194 |   24.250 |   0.00000001 |   3.71900646 |
   195 |   24.375 |   0.00000001 |   3.71350038 |
   196 |   24.500 |   0.00000001 |   3.70805338 |
   197 |   24.625 |   0.00000001 |   3.70266446 |
   198 |   24.750 |   0.00000001 |   3.69733250 |
   199 |   24.875 |   0.00000001 |   3.69205756 |
   200 |   25.000 |   0.00000001 |   3.68684025 |
--------------------------------------------------------------------------------
Done.
