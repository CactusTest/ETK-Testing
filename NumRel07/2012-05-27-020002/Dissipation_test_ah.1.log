/home/jhar131/TESTING/einsteintoolkit/2012-05-27-020002/Cactus/TEST/sim/Dissipation
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      May 27 2012 (02:48:09)
Run date:          May 27 2012 (02:49:31-0500)
Run host:          numrel07.cct.lsu.edu (pid=16892)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-05-27-020002/Cactus/TEST/sim/Dissipation
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-05-27-020002/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-05-27-020002/Cactus/arrangements/CactusNumerical/Dissipation/test/test_ah.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->ahfinderdirect sphericalsurface symbase CoordBase carpetioascii idaxibrillbh spacemask admcoupling admbase staticconformal admmacros coordgauge admanalysis mol ml_bssn ml_bssn_helper genericfd loopcontrol newrad tmunubase ml_admconstraints carpetinterp localinterp aeilocalinterp boundary time carpet carpetlib carpetregrid carpetreduce loopcontrol carpetslab cartgrid3d ioutil carpetiobasic carpetioscalar ellbase nanchecker dissipation localreduce reflectionsymmetry<---
Warning: thorn loopcontrol already scheduled for activation
Activating thorn admanalysis...Success -> active implementation ADMAnalysis
Activating thorn admbase...Success -> active implementation ADMBase
Activating thorn admcoupling...Success -> active implementation ADMCoupling
Activating thorn admmacros...Success -> active implementation ADMMacros
Activating thorn aeilocalinterp...Success -> active implementation AEILocalInterp
Activating thorn ahfinderdirect...Success -> active implementation AHFinderDirect
Activating thorn boundary...Success -> active implementation boundary
Activating thorn carpet...Success -> active implementation Driver
Activating thorn carpetinterp...Success -> active implementation interp
Activating thorn carpetioascii...Success -> active implementation IOASCII
Activating thorn carpetiobasic...Success -> active implementation IOBasic
Activating thorn carpetioscalar...Success -> active implementation IOScalar
Activating thorn carpetlib...Success -> active implementation CarpetLib
Activating thorn carpetreduce...Success -> active implementation reduce
Activating thorn carpetregrid...Success -> active implementation CarpetRegrid
Activating thorn carpetslab...Success -> active implementation Hyperslab
Activating thorn cartgrid3d...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn coordgauge...Success -> active implementation CoordGauge
Activating thorn dissipation...Success -> active implementation Dissipation
Activating thorn ellbase...Success -> active implementation ellbase
Activating thorn genericfd...Success -> active implementation GenericFD
Activating thorn idaxibrillbh...Success -> active implementation idaxibrillbh
Activating thorn ioutil...Success -> active implementation IO
Activating thorn localinterp...Success -> active implementation LocalInterp
Activating thorn localreduce...Success -> active implementation LocalReduce
Activating thorn loopcontrol...Success -> active implementation LoopControl
Activating thorn ml_admconstraints...Success -> active implementation ML_ADMConstraints
Activating thorn ml_bssn...Success -> active implementation ML_BSSN
Activating thorn ml_bssn_helper...Success -> active implementation ML_BSSN_Helper
Activating thorn mol...Success -> active implementation MethodOfLines
Activating thorn nanchecker...Success -> active implementation NaNChecker
Activating thorn newrad...Success -> active implementation NewRad
Activating thorn reflectionsymmetry...Success -> active implementation ReflectionSymmetry
Activating thorn spacemask...Success -> active implementation SpaceMask
Activating thorn sphericalsurface...Success -> active implementation SphericalSurface
Activating thorn staticconformal...Success -> active implementation StaticConformal
Activating thorn symbase...Success -> active implementation SymBase
Activating thorn time...Success -> active implementation time
Activating thorn tmunubase...Success -> active implementation TmunuBase
Activation requested for 
--->NoExcision<---
Activating thorn NoExcision...Success -> active implementation NoExcision
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CarpetLib::CarpetLib_registercycleclock: [global] Register cycle based timer
      ML_BSSN_Helper::ML_BSSN_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      EllBase::Ell_RegisterBaseEqTypes: Register the standard elliptic classes
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LocalInterp::LocalInterp_Startup: register LocalInterp's interpolation operators
      LocalReduce::LocalReduce_Startup: Startup routine
      LoopControl::lc_check_type_sizes: [meta] Check that sizes of control structures are identical in C and Fortran
      ML_ADMConstraints::ML_ADMConstraints_Startup: [meta] create banner
      ML_BSSN::ML_BSSN_Startup: [meta] create banner
      ML_BSSN_Helper::ML_BSSN_RegisterSlicing: [meta] Register slicing
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMAnalysis::ADMAnalysis_RegisterSymmetry: [global] Register symmetry of Ricci tensor and scalar
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        ML_ADMConstraints::ML_ADMConstraints_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN::ML_BSSN_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN_Helper::ML_BSSN_RegisterConstrained: [meta] Register ADMBase variables as constrained
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ML_ADMConstraints::ML_ADMConstraints_RegisterSymmetries: [meta] register symmetries
          ML_BSSN::ML_BSSN_RegisterSymmetries: [meta] register symmetries
          ReflectionSymmetry::ReflectionSymmetry_Register: Register reflection symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMAnalysis::ADMAnalysis_ParamCheck: [global] Check that the metric_type is recognised
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetRegrid::CarpetRegridParamcheck: [global] Check Parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Dissipation::dissipation_paramcheck: Check dissipation parameters for consistency
      IDAxiBrillBH::IDAxiBrillBH_ParamChecker: [global] Check that the metric_type is recognised
      MoL::MoL_ParamCheck: Basic parameter checking

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        Dissipation::setup_epsdis: Setup spatially varying dissipation
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_ADMConstraints_bc_group: ML_ADMConstraints
            ML_ADMConstraints::ML_ADMConstraints_SelectBCs: [level] ML_ADMConstraints_SelectBCs
            GROUP ML_ADMConstraints_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        AHFinderDirect::AHFinderDirect_setup: [global] setup data structures
        Dissipation::dissipation_basegrid: Ensure that there are enough ghost zones
        ML_ADMConstraints::ML_ADMConstraints_CheckBoundaries: [meta] check boundaries treatment
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          IDAxiBrillBH::IDAxiBrillBH: Construct IDAxiBrillBH
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          ADMBase::ADMBase_LapseOne: Set the lapse to 1 at all points
          ADMBase::ADMBase_ShiftZero: Set the shift to 0 at all points
          ADMBase::ADMBase_DtShiftZero: Set the dtshift to 0 at all points
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
          NoExcision::NoExcision_Overwrite: Overwrite regions with Minkowski
        ML_BSSN::ML_BSSN_InitGamma: ML_BSSN_InitGamma
        ML_BSSN::ML_BSSN_convertFromADMBase: ML_BSSN_convertFromADMBase
        ML_BSSN::ML_BSSN_convertFromADMBaseGamma: ML_BSSN_convertFromADMBaseGamma
        MoL::MoL_StartLoop: [level] Initialise the step size control
        ML_BSSN_Helper::ML_BSSN_ExtrapolateGammas: Extrapolate Gammas and time derivatives of lapse and shift
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_BSSN::ML_BSSN_enforce: ML_BSSN_enforce
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
          GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_ADMConstraints_group: ML_ADMConstraints
            ML_ADMConstraints::ML_ADMConstraints: ML_ADMConstraints
            GROUP ML_ADMConstraints_bc_group: ML_ADMConstraints
              ML_ADMConstraints::ML_ADMConstraints_SelectBCs: [level] ML_ADMConstraints_SelectBCs
              GROUP ML_ADMConstraints_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints1_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1: ML_BSSN_constraints1
            GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
              ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
              GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2: ML_BSSN_constraints2
            GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
              ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
              GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
          GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_ADMConstraints_bc_group: ML_ADMConstraints
            ML_ADMConstraints::ML_ADMConstraints_SelectBCs: [level] ML_ADMConstraints_SelectBCs
            GROUP ML_ADMConstraints_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        AHFinderDirect::AHFinderDirect_import_mask: [global] [loop-local] import the excision mask
        AHFinderDirect::AHFinderDirect_find_horizons: [global] find apparent horizon(s) after this time step
        AHFinderDirect::AHFinderDirect_store: [global] store apparent horizon(s) into spherical surface(s)
        AHFinderDirect::AHFinderDirect_save: [global] save apparent horizon(s) into Cactus variables
        AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        Dissipation::setup_epsdis: Setup spatially varying dissipation
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        AHFinderDirect::AHFinderDirect_setup: [global] setup data structures
        Dissipation::dissipation_basegrid: Ensure that there are enough ghost zones
        ML_ADMConstraints::ML_ADMConstraints_CheckBoundaries: [meta] check boundaries treatment
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        AHFinderDirect::AHFinderDirect_recover: [global] import horizon data from Cactus variables
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
          GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        ADMAnalysis::ADMAnalysis_EvaltrK: Compute the trace of the extrinsic curvature and the determinant of the metric
        ADMAnalysis::ADMAnalysis_MetricCartToSphere: Calculate the spherical metric in r,theta(q), phi(p)
        ADMAnalysis::ADMAnalysis_CurvCartToSphere: Calculate the spherical ex. curvature in r, theta(q), phi(p)
        GROUP RicciGroup: Calculate Ricci tensor, with boundary conditions
          ADMAnalysis::ADMAnalysis_Ricci: Calculate Ricci tensor, with boundary conditions
          GROUP RicciBoundariesGroup: Set Ricci tensor on the boundary
            ADMAnalysis::ADMAnalysis_Ricci_Boundaries: [level] Select boundary conditions for the Ricci tensor
            GROUP ADMAnalysis_ApplyBCs: Apply boundary conditions to the Ricci tensor
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
        ML_BSSN::ML_BSSN_InitRHS: ML_BSSN_InitRHS
        GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
          ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
          ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
          ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
          ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      Dissipation::setup_epsdis: Setup spatially varying dissipation
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
        GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_ADMConstraints_bc_group: ML_ADMConstraints
          ML_ADMConstraints::ML_ADMConstraints_SelectBCs: [level] ML_ADMConstraints_SelectBCs
          GROUP ML_ADMConstraints_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
                  ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
                  ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
                  ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
                  ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
              GROUP MoL_PostRHS: Modify RHS functions
                Dissipation::dissipation_add: Add Kreiss-Oliger dissipation to the right hand sides
                NoExcision::NoExcision_Reduce: Reduce RHS
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient ICN method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_BSSN::ML_BSSN_enforce: ML_BSSN_enforce
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
                ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
                GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
                  GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
                    ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
                    ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
                    ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
                  ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
                  GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
                    GROUP BoundaryConditions: Execute all boundary conditions
                      Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                      CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                      ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_ADMConstraints_group: ML_ADMConstraints
          ML_ADMConstraints::ML_ADMConstraints: ML_ADMConstraints
          GROUP ML_ADMConstraints_bc_group: ML_ADMConstraints
            ML_ADMConstraints::ML_ADMConstraints_SelectBCs: [level] ML_ADMConstraints_SelectBCs
            GROUP ML_ADMConstraints_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints1_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1: ML_BSSN_constraints1
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2: ML_BSSN_constraints2
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
        GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_ADMConstraints_bc_group: ML_ADMConstraints
          ML_ADMConstraints::ML_ADMConstraints_SelectBCs: [level] ML_ADMConstraints_SelectBCs
          GROUP ML_ADMConstraints_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      AHFinderDirect::AHFinderDirect_import_mask: [global] [loop-local] import the excision mask
      AHFinderDirect::AHFinderDirect_find_horizons: [global] find apparent horizon(s) after this time step
      AHFinderDirect::AHFinderDirect_store: [global] store apparent horizon(s) into spherical surface(s)
      AHFinderDirect::AHFinderDirect_save: [global] save apparent horizon(s) into Cactus variables
      AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
      Dissipation::setup_epsdis: Setup spatially varying dissipation
  if (checkpoint)
    [CCTK_CHECKPOINT]
  endif
  if (analysis)
    [CCTK_ANALYSIS]
      ADMAnalysis::ADMAnalysis_EvaltrK: Compute the trace of the extrinsic curvature and the determinant of the metric
      ADMAnalysis::ADMAnalysis_MetricCartToSphere: Calculate the spherical metric in r,theta(q), phi(p)
      ADMAnalysis::ADMAnalysis_CurvCartToSphere: Calculate the spherical ex. curvature in r, theta(q), phi(p)
      GROUP RicciGroup: Calculate Ricci tensor, with boundary conditions
        ADMAnalysis::ADMAnalysis_Ricci: Calculate Ricci tensor, with boundary conditions
        GROUP RicciBoundariesGroup: Set Ricci tensor on the boundary
          ADMAnalysis::ADMAnalysis_Ricci_Boundaries: [level] Select boundary conditions for the Ricci tensor
          GROUP ADMAnalysis_ApplyBCs: Apply boundary conditions to the Ricci tensor
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
      ML_BSSN::ML_BSSN_InitRHS: ML_BSSN_InitRHS
      GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
        ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
        ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
        ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
        ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::lc_printstats_terminate: [meta] Output loop control statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      Dissipation::setup_epsdis: Setup spatially varying dissipation
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        ML_ADMConstraints::ML_ADMConstraints_SelectBoundConds: [level] select boundary conditions
        GROUP ML_ADMConstraints_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_ADMConstraints_bc_group: ML_ADMConstraints
          ML_ADMConstraints::ML_ADMConstraints_SelectBCs: [level] ML_ADMConstraints_SelectBCs
          GROUP ML_ADMConstraints_ApplyBCs: Apply BCs for groups set in ML_ADMConstraints
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
Current core file size limit: hard=[unlimited], soft=0 MB
Current memory size limit: hard=[unlimited], soft=[unlimited]
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
ML_ADMConstraints
--------------------------------------------------------------------------------
ML_BSSN
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 4 threads, this is thread 0
INFO (Carpet): There are 4 threads in total
INFO (Carpet): There are 4 threads per process
INFO (Carpet): Host listing:
   host 0: "numrel07.cct.lsu.edu"
INFO (Carpet): Host/process mapping:
   process 0: host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): Host mapping: This is process 0, host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): This process runs on host numrel07.cct.lsu.edu, pid=16892
INFO (Carpet): This process runs on 4 cores: 0-3
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): [tl=0] Boundary specification for map 0:
   nboundaryzones: [[2,2,2],[2,2,2]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[0,0,1],[0,0,0]]
INFO (Carpet): [tl=0] CoordBase domain specification for map 0:
   physical extent: [-12.5,-12.5,0] : [12.3,12.3,12]   ([24.8,24.8,12])
   interior extent: [-12.1,-12.1,0] : [11.9,11.9,11.6]   ([24,24,11.6])
   exterior extent: [-12.9,-12.9,-0.8] : [12.7,12.7,12.4]   ([25.6,25.6,13.2])
   base_spacing   : [0.4,0.4,0.4]
INFO (Carpet): [tl=0] Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-12.5,-12.5,0] : [12.3,12.3,12]   ([24.8,24.8,12])
   interior extent   : [-12.1,-12.1,0] : [11.9,11.9,11.6]   ([24,24,11.6])
   exterior extent   : [-12.9,-12.9,-0.8] : [12.7,12.7,12.4]   ([25.6,25.6,13.2])
   spacing           : [0.4,0.4,0.4]
INFO (Carpet): [tl=0] Base grid specification for map 0:
   number of grid points             : [65,65,34]
   number of coarse grid ghost points: [[2,2,2],[2,2,2]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[5,5,5],[5,5,5]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[5,5,5],[5,5,5]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 450 grid functions in 77 groups
INFO (Carpet):    There are 126 grid scalars in 39 groups
INFO (Carpet):    There are 7 1-dimensional grid arrays in 3 groups
INFO (Carpet):    There are 2 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 1 3-dimensional grid arrays in 1 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOScalar): Periodic scalar output requested for:
   ADMBASE::gxx
   ADMBASE::gxy
   ADMBASE::gxz
   ADMBASE::gyy
   ADMBASE::gyz
   ADMBASE::gzz
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   DISSIPATION::epsdisA
   ML_ADMCONSTRAINTS::H
   ML_ADMCONSTRAINTS::M1
   ML_ADMCONSTRAINTS::M2
   ML_ADMCONSTRAINTS::M3
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::gxy
   ADMBASE::gxz
   ADMBASE::gyy
   ADMBASE::gyz
   ADMBASE::gzz
   ADMBASE::kxx
   ADMBASE::kxy
   ADMBASE::kxz
   ADMBASE::kyy
   ADMBASE::kyz
   ADMBASE::kzz
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   DISSIPATION::epsdisA
   ML_ADMCONSTRAINTS::H
   ML_ADMCONSTRAINTS::M1
   ML_ADMCONSTRAINTS::M2
   ML_ADMCONSTRAINTS::M3
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Iterative Crank Nicholson with 3 iterations as the time integrator.
INFO (MoL): The maximum number of evolved variables is 25. 25 are registered.
INFO (MoL): The maximum number of constrained variables is 20. 20 are registered.
INFO (MoL): The maximum number of SandR variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (SymBase): Symmetry on lower z-face: reflection_symmetry
INFO (IDAxiBrillBH): Initial data will be axisymmetric BH+Brill Wave
INFO (IDAxiBrillBH):   ... wave amplitude: 0.100000
INFO (IDAxiBrillBH):   ... wave center (in eta coords): 0.000000
INFO (IDAxiBrillBH):   ... wave sigma: 1.000000
INFO (IDAxiBrillBH):   ... wave power of sin theta: 4
INFO (IDAxiBrillBH):   ... outer edge of eta grid: 6.000000
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [64,64,33]   ([65,65,34] + PADDING) 143650
   [1][0][0]   exterior: [44,44,2] : [84,84,24]   ([41,41,23] + PADDING) 38663
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-12.900000000000000,-12.900000000000000,-0.800000000000000] : [12.700000000000001,12.700000000000001,12.400000000000000] : [0.400000000000000,0.400000000000000,0.400000000000000]
   [1][0][0]   exterior: [-4.100000000000000,-4.100000000000000,-0.400000000000000] : [3.900000000000000,3.900000000000000,4.000000000000001] : [0.200000000000000,0.200000000000000,0.200000000000000]
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 47k active, 61k owned (+28%), 82k total (+34%), 3 steps/time
INFO (Carpet): GF: vars: 203, pts: 26M active, 30M owned (+16%), 39M total (+32%), 1.0 comp/proc
INFO (Carpet): GA: vars: 130, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.314 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv      max/avg-1
INFO (Carpet): Level  0:      23M     23M     23M      0M active      0%
INFO (Carpet): Level  1:       3M      3M      3M      0M active      0%
INFO (ADMMacros): Spatial finite differencing order: 2
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>4.0000000e-01  dy=>4.0000000e-01  dz=>4.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-12.900,12.700]  y=>[-12.900,12.700]  z=>[-0.800,12.400]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,64]  y=>[0,64]  z=>[0,33]
INFO (AHFinderDirect): setting up AHFinderDirect data structures
INFO (AHFinderDirect):            to search for 1 horizon on 1 processor
INFO (AHFinderDirect):       constructing full sphere patch system
INFO (AHFinderDirect):                    at origin (0,0,0)
INFO (AHFinderDirect):                    with 18 angular zones per right angle
INFO (AHFinderDirect):       ==> 2166 nominal, 3174 ghosted angular grid points
INFO (Time): Timestep set to 0.1 (courant_static)
INFO (IDAxiBrillBH): Calling axisymmetric solver
 cyc= 2 max(res)=7.41-323
 tolerance condition tol=1.00E-08 satisfied
INFO (IDAxiBrillBH): Solve complete
 rmax =   2.21140908363004485E-009
 axibheps =   1.00000000000000002E-008
 psi2d =    1.0000000000000000        -0.13075798312925402     
 Resulting eps =  1.24388112681117491E-005
INFO (IDAxiBrillBH): interpolating solution to xyz grid points
INFO (IDAxiBrillBH): converting to physical metric
INFO (IDAxiBrillBH): computing ADM mass
 ADM mass:    1.9212786351094766     
INFO (ADMMacros): Spatial finite differencing order: 2
INFO (Time): Timestep set to 0.05 (courant_static)
INFO (IDAxiBrillBH): Calling axisymmetric solver
 cyc= 2 max(res)=2.03E-06
 tolerance condition tol=1.00E-08 satisfied
INFO (IDAxiBrillBH): Solve complete
 rmax =   2.21140908363004485E-009
 axibheps =   1.00000000000000002E-008
 psi2d =    1.0000000000000000        -0.13075798312925402     
 Resulting eps =  1.24388112681117491E-005
INFO (IDAxiBrillBH): interpolating solution to xyz grid points
INFO (IDAxiBrillBH): converting to physical metric
INFO (IDAxiBrillBH): computing ADM mass
 ADM mass:    1.9212786351094766     
INFO (AHFinderDirect): proc 0: searching for horizon 1/1
INFO (AHFinderDirect): AH 1/1: r=1.03705 at (-0.000000,0.000000,0.000000)
INFO (AHFinderDirect): AH 1/1: area=185.5037091 m_irreducible=1.921061954
-----------------------------------------------
Iteration      Time |      DISSIPATION::epsdisA
                    |      minimum      maximum
-----------------------------------------------
        0     0.000 |   -1.0000000    0.2000000
INFO (AHFinderDirect): proc 0: searching for horizon 1/1
INFO (AHFinderDirect): AH 1/1: r=1.04757 at (-0.000000,-0.000000,0.000000)
INFO (AHFinderDirect): AH 1/1: area=185.650911 m_irreducible=1.921824009
INFO (AHFinderDirect): proc 0: searching for horizon 1/1
INFO (AHFinderDirect): AH 1/1: r=1.06021 at (-0.000000,0.000000,-0.000000)
INFO (AHFinderDirect): AH 1/1: area=185.7726152 m_irreducible=1.922453836
        2     0.100 |   -1.0000000    0.2000000
INFO (AHFinderDirect): proc 0: searching for horizon 1/1
INFO (AHFinderDirect): AH 1/1: r=1.07061 at (-0.000000,0.000000,-0.000000)
INFO (AHFinderDirect): AH 1/1: area=185.8833613 m_irreducible=1.923026774
INFO (AHFinderDirect): proc 0: searching for horizon 1/1
INFO (AHFinderDirect): AH 1/1: r=1.08292 at (-0.000000,0.000000,-0.000000)
INFO (AHFinderDirect): AH 1/1: area=185.9268242 m_irreducible=1.92325158
        4     0.200 |   -1.0000000    0.2000000
LoopControl timing statistics:
Loop #0 "ML_BSSN_Advect":
   total count: 72   total setup: 0.0142835   total calc: 5.8006
   avg calc: 0.0805639   avg first calc: 0.0811102
   avg improvement: -0%   saved: 0.0393329 seconds
Loop #1 "ML_BSSN_Dissipation":
   total count: 72   total setup: 0.00723314   total calc: 5.42934
   avg calc: 0.0754075   avg first calc: 0.0759329
   avg improvement: -0%   saved: 0.0378305 seconds
Loop #2 "ML_BSSN_RHS2":
   total count: 72   total setup: 0.0125883   total calc: 1.95877
   avg calc: 0.0272052   avg first calc: 0.0273594
   avg improvement: -0%   saved: 0.0111011 seconds
Loop #3 "ML_BSSN_RHS1":
   total count: 72   total setup: 0.0145579   total calc: 2.54454
   avg calc: 0.0353408   avg first calc: 0.0355485
   avg improvement: -0%   saved: 0.0149527 seconds
Loop #4 "ML_BSSN_InitRHS":
   total count: 32   total setup: 0.000554546   total calc: 1.37093
   avg calc: 0.0428415   avg first calc: 0.0433606
   avg improvement: 0%   saved: 0.0166112 seconds
Loop #5 "ML_BSSN_constraints2":
   total count: 32   total setup: 0.000391676   total calc: 0.549499
   avg calc: 0.0171718   avg first calc: 0.0173579
   avg improvement: 0%   saved: 0.00595491 seconds
Loop #6 "ML_BSSN_constraints1":
   total count: 32   total setup: 0.000405925   total calc: 0.634326
   avg calc: 0.0198227   avg first calc: 0.0200679
   avg improvement: 0%   saved: 0.00784606 seconds
Loop #7 "ML_ADMConstraints":
   total count: 32   total setup: 0.000406482   total calc: 1.31131
   avg calc: 0.0409786   avg first calc: 0.0416241
   avg improvement: 0%   saved: 0.0206577 seconds
Loop #8 "ML_BSSN_convertToADMBaseDtLapseShift":
   total count: 104   total setup: 0.00175918   total calc: 1.45847
   avg calc: 0.0140238   avg first calc: 0.014078
   avg improvement: 0%   saved: 0.00563603 seconds
Loop #9 "ML_BSSN_convertToADMBase":
   total count: 104   total setup: 0.0194155   total calc: 3.03542
   avg calc: 0.0291867   avg first calc: 0.0292455
   avg improvement: -0%   saved: 0.00611582 seconds
Loop #10 "ML_BSSN_enforce":
   total count: 80   total setup: 0.0123905   total calc: 1.29333
   avg calc: 0.0161666   avg first calc: 0.0162188
   avg improvement: -0%   saved: 0.00417798 seconds
Total calculation time: 26.2321 seconds; total saved time: 0.170217 seconds
--------------------------------------------------------------------------------
Done.
