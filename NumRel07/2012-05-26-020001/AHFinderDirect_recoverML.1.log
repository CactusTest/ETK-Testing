/home/jhar131/TESTING/einsteintoolkit/2012-05-26-020001/Cactus/TEST/sim/AHFinderDirect
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      May 26 2012 (02:47:45)
Run date:          May 26 2012 (02:54:06-0500)
Run host:          numrel07.cct.lsu.edu (pid=26295)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-05-26-020001/Cactus/TEST/sim/AHFinderDirect
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-05-26-020001/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-05-26-020001/Cactus/arrangements/EinsteinAnalysis/AHFinderDirect/test/recoverML.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->IOUtil<---
Activating thorn IOUtil...Success -> active implementation IO
Activation requested for 
--->Carpet CarpetLib<---
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activation requested for 
--->Boundary CartGrid3D CoordBase RotatingSymmetry180 Slab SymBase ReflectionSymmetry<---
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn ReflectionSymmetry...Success -> active implementation ReflectionSymmetry
Activating thorn RotatingSymmetry180...Success -> active implementation RotatingSymmetry180
Activating thorn Slab...Success -> active implementation Slab
Activating thorn SymBase...Success -> active implementation SymBase
Activation requested for 
--->ADMBase ADMCoupling StaticConformal CoordGauge SpaceMask Exact ADMMacros ML_BSSN ML_BSSN_Helper GenericFD TmunuBase NewRad MoL<---
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMCoupling...Success -> active implementation ADMCoupling
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn Exact...Success -> active implementation exact
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn ML_BSSN...Success -> active implementation ML_BSSN
Activating thorn ML_BSSN_Helper...Success -> active implementation ML_BSSN_Helper
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn NewRad...Success -> active implementation NewRad
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn TmunuBase...Success -> active implementation TmunuBase
Activation requested for 
--->Time<---
Activating thorn Time...Success -> active implementation time
Activation requested for 
--->NoExcision SphericalSurface<---
Activating thorn NoExcision...Success -> active implementation NoExcision
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activation requested for 
--->CarpetIOASCII<---
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activation requested for 
--->CarpetIOHDF5<---
Activating thorn CarpetIOHDF5...Success -> active implementation IOHDF5
Activation requested for 
--->SphericalSurface<---
Warning: thorn SphericalSurface already active
Activation requested for 
--->LocalInterp AEILocalInterp CarpetInterp GSL LoopControl CarpetReduce AHFinderDirect<---
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn AHFinderDirect...Success -> active implementation AHFinderDirect
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn GSL...Success -> active implementation GSL
Activating thorn LocalInterp...Success -> active implementation LocalInterp
Activating thorn LoopControl...Success -> active implementation LoopControl
INFO (CarpetIOHDF5): Recovering parameters from checkpoint file '../../../arrangements/EinsteinAnalysis/AHFinderDirect/test/checkpointML/checkpoint.chkpt.it_1.h5'
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CarpetLib::CarpetLib_registercycleclock: [global] Register cycle based timer
      ML_BSSN_Helper::ML_BSSN_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LocalInterp::LocalInterp_Startup: register LocalInterp's interpolation operators
      LoopControl::lc_check_type_sizes: [meta] Check that sizes of control structures are identical in C and Fortran
      ML_BSSN::ML_BSSN_Startup: [meta] create banner
      ML_BSSN_Helper::ML_BSSN_RegisterSlicing: [meta] Register slicing
      CarpetIOHDF5::CarpetIOHDF5_Startup: Startup routine
      MoL::MoL_Startup: Startup banner
      Slab::Slab_InitMPIDatatypes: Create MPI datatypes for complex variables in C
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        ML_BSSN::ML_BSSN_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN_Helper::ML_BSSN_RegisterConstrained: [meta] Register ADMBase variables as constrained
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      Slab::Slab_InitTimers: Initialise timers
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ML_BSSN::ML_BSSN_RegisterSymmetries: [meta] register symmetries
          ReflectionSymmetry::ReflectionSymmetry_Register: Register reflection symmetry boundaries
          RotatingSymmetry180::Rot180_RegisterSymmetry: Register symmetry boundaries
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Exact::Exact_ParamCheck: [global] do consistency checks on our parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      RotatingSymmetry180::Rot180_CheckTensorTypes: Check tensor type definitions for consistency

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOff: Set the dtshift_state variable to 0
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOHDF5::CarpetIOHDF5_Init: [global] Initialisation routine
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        AHFinderDirect::AHFinderDirect_setup: [global] setup data structures
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          Exact::Exact__decode_pars: decode/copy thorn Exact parameters into grid scalars
          Exact::Exact__initialize: Set initial data from exact solution on a trivial slice
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          Exact::Exact__gauge: Set initial lapse and/or shift from exact solution on a trivial slice
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
          NoExcision::NoExcision_Overwrite: Overwrite regions with Minkowski
        ML_BSSN::ML_BSSN_InitGamma: ML_BSSN_InitGamma
        ML_BSSN::ML_BSSN_convertFromADMBase: ML_BSSN_convertFromADMBase
        ML_BSSN::ML_BSSN_convertFromADMBaseGamma: ML_BSSN_convertFromADMBaseGamma
        MoL::MoL_StartLoop: [level] Initialise the step size control
        ML_BSSN_Helper::ML_BSSN_ExtrapolateGammas: Extrapolate Gammas and time derivatives of lapse and shift
      [CCTK_POSTINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_CloseFiles: [global] Close all filereader input files
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_BSSN::ML_BSSN_enforce: ML_BSSN_enforce
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_BSSN_constraints1_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1: ML_BSSN_constraints1
            GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
              ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
              GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2: ML_BSSN_constraints2
            GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
              ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
              GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                  RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        AHFinderDirect::AHFinderDirect_import_mask: [global] [loop-local] import the excision mask
        AHFinderDirect::AHFinderDirect_find_horizons: [global] find apparent horizon(s) after this time step
        AHFinderDirect::AHFinderDirect_store: [global] store apparent horizon(s) into spherical surface(s)
        AHFinderDirect::AHFinderDirect_save: [global] save apparent horizon(s) into Cactus variables
        AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOff: Set the dtlapse_state variable to 0
        ADMBase::ADMBase_SetDtShiftStateOff: Set the dtshift_state variable to 0
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOHDF5::CarpetIOHDF5_Init: [global] Initialisation routine
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        AHFinderDirect::AHFinderDirect_setup: [global] setup data structures
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_RECOVER_VARIABLES]
        IOUtil::IOUtil_RecoverGH: [level] Checkpoint recovery routine
      [CCTK_POST_RECOVER_VARIABLES]
        AHFinderDirect::AHFinderDirect_recover: [global] import horizon data from Cactus variables
        CarpetIOHDF5::CarpetIOHDF5_InitCheckpointingIntervals: [global] Initialisation of checkpointing intervals after recovery
        CarpetIOHDF5::CarpetIOHDF5_CloseFiles: [meta] Close all initial data checkpoint files after recovery
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
              ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
              ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
            ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_InitialDataCheckpoint: [meta] Initial data checkpoint routine
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
        ML_BSSN::ML_BSSN_InitRHS: ML_BSSN_InitRHS
        GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
          ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
          ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
          ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
          ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
          ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      ADMBase::ADMBase_ShiftStatic: Copy the shift to the current time level
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
                  ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
                  ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
                  ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
                  ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
                  ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
              GROUP MoL_PostRHS: Modify RHS functions
                NoExcision::NoExcision_Reduce: Reduce RHS
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient ICN method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_BSSN::ML_BSSN_enforce: ML_BSSN_enforce
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
                GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
                GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                    RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
                  GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
                    ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
                    ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
                    ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
                  ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
                  GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
                    GROUP BoundaryConditions: Execute all boundary conditions
                      Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                      CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                      ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                      RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
                    Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_BSSN_constraints1_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1: ML_BSSN_constraints1
          GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
            ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
            GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2: ML_BSSN_constraints2
          GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
            ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
            GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
                RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      AHFinderDirect::AHFinderDirect_import_mask: [global] [loop-local] import the excision mask
      AHFinderDirect::AHFinderDirect_find_horizons: [global] find apparent horizon(s) after this time step
      AHFinderDirect::AHFinderDirect_store: [global] store apparent horizon(s) into spherical surface(s)
      AHFinderDirect::AHFinderDirect_save: [global] save apparent horizon(s) into Cactus variables
      AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
  if (checkpoint)
    [CCTK_CHECKPOINT]
      CarpetIOHDF5::CarpetIOHDF5_EvolutionCheckpoint: [meta] Evolution checkpoint routine
  endif
  if (analysis)
    [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
      ML_BSSN::ML_BSSN_InitRHS: ML_BSSN_InitRHS
      GROUP ML_BSSN_evolCalcGroup: Calculate BSSN RHS
        ML_BSSN::ML_BSSN_RHS1: ML_BSSN_RHS1
        ML_BSSN::ML_BSSN_RHS2: ML_BSSN_RHS2
        ML_BSSN::ML_BSSN_Dissipation: ML_BSSN_Dissipation
        ML_BSSN::ML_BSSN_Advect: ML_BSSN_Advect
        ML_BSSN_Helper::ML_BSSN_NewRad: Apply NewRad boundary conditions to RHS
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      CarpetIOHDF5::CarpetIOHDF5_TerminationCheckpoint: [meta] Termination checkpoint routine
      LoopControl::lc_printstats_terminate: [meta] Output loop control statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      AHFinderDirect::AHFinderDirect_maybe_do_masks: [global] [loop-local] set mask(s) based on apparent horizon position(s)
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
            RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_BSSN_convertToADMBaseGroup: Calculate ADM variables
            ML_BSSN::ML_BSSN_convertToADMBase: ML_BSSN_convertToADMBase
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShift: ML_BSSN_convertToADMBaseDtLapseShift
            ML_BSSN::ML_BSSN_convertToADMBaseDtLapseShiftBoundary: ML_BSSN_convertToADMBaseDtLapseShiftBoundary
          ML_BSSN_Helper::ML_BSSN_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_constraints1_bc_group: ML_BSSN_constraints1
          ML_BSSN::ML_BSSN_constraints1_SelectBCs: [level] ML_BSSN_constraints1_SelectBCs
          GROUP ML_BSSN_constraints1_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_constraints2_bc_group: ML_BSSN_constraints2
          ML_BSSN::ML_BSSN_constraints2_SelectBCs: [level] ML_BSSN_constraints2_SelectBCs
          GROUP ML_BSSN_constraints2_ApplyBCs: Apply BCs for groups set in ML_BSSN_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              ReflectionSymmetry::ReflectionSymmetry_Apply: Apply reflection symmetries
              RotatingSymmetry180::Rot180_ApplyBC: Apply 180 degree rotational symmetry boundary condition
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   process 0: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
Current core file size limit: hard=[unlimited], soft=0 MB
Current memory size limit: hard=[unlimited], soft=[unlimited]
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
ML_BSSN
--------------------------------------------------------------------------------
AMR HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 0D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 1D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 2D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 3D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 1 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 4 threads, this is thread 0
INFO (Carpet): There are 4 threads in total
INFO (Carpet): There are 4 threads per process
INFO (Carpet): Host listing:
   host 0: "numrel07.cct.lsu.edu"
INFO (Carpet): Host/process mapping:
   process 0: host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): Host mapping: This is process 0, host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): This process runs on host numrel07.cct.lsu.edu, pid=26295
INFO (Carpet): This process runs on 4 cores: 0-3
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): [tl=0] Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,0,1],[0,0,0]]
INFO (Carpet): [tl=0] CoordBase domain specification for map 0:
   physical extent: [0,-3,0] : [3,3,3]   ([3,6,3])
   interior extent: [0,-2.80645,0] : [2.84211,2.80645,2.84211]   ([2.84211,5.6129,2.84211])
   exterior extent: [-0.473684,-3.3871,-0.473684] : [3.31579,3.3871,3.31579]   ([3.78947,6.77419,3.78947])
   base_spacing   : [0.157895,0.193548,0.157895]
INFO (Carpet): [tl=0] Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [0,-3,0] : [3,3,3]   ([3,6,3])
   interior extent   : [0,-2.80645,0] : [2.84211,2.80645,2.84211]   ([2.84211,5.6129,2.84211])
   exterior extent   : [-0.473684,-3.3871,-0.473684] : [3.31579,3.3871,3.31579]   ([3.78947,6.77419,3.78947])
   spacing           : [0.157895,0.193548,0.157895]
INFO (Carpet): [tl=0] Base grid specification for map 0:
   number of grid points             : [25,36,25]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 413 grid functions in 70 groups
INFO (Carpet):    There are 111 grid scalars in 40 groups
INFO (Carpet):    There are 7 1-dimensional grid arrays in 3 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 1 3-dimensional grid arrays in 1 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ML_BSSN::phi
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5' registered: AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_0D' registered: 0D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_1D' registered: 1D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_2D' registered: 2D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_3D' registered: 3D AMR output of grid variables to HDF5 files
INFO (MoL): Using Iterative Crank Nicholson with 3 iterations as the time integrator.
INFO (MoL): The maximum number of evolved variables is 25. 25 are registered.
INFO (MoL): The maximum number of constrained variables is 20. 20 are registered.
INFO (MoL): The maximum number of SandR variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (SymBase): Symmetry on lower x-face: rotating_symmetry_180
INFO (SymBase): Symmetry on lower z-face: reflection_symmetry
INFO (ADMMacros): Spatial finite differencing order: 2
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.5789474e-01  dy=>1.9354839e-01  dz=>1.5789474e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-0.474, 3.316]  y=>[-3.387, 3.387]  z=>[-0.474, 3.316]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,24]  y=>[0,35]  z=>[0,24]
INFO (AHFinderDirect): setting up AHFinderDirect data structures
INFO (AHFinderDirect):            to search for 1 horizon on 1 processor
INFO (AHFinderDirect):       constructing full sphere patch system
INFO (AHFinderDirect):                    at origin (0.5,0.7,0)
INFO (AHFinderDirect):                    with 18 angular zones per right angle
INFO (AHFinderDirect):       ==> 2166 nominal, 3174 ghosted angular grid points
INFO (Time): Timestep set to 0.0394737 (courant_static)
INFO (CarpetIOHDF5): recovering grid structure
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [24,35,24]   ([25,36,25] + PADDING) 22500
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-0.473684210526316,-3.387096774193548,-0.473684210526316] : [3.315789473684211,3.387096774193548,3.315789473684211] : [0.157894736842105,0.193548387096774,0.157894736842105]
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 274k active, 274k owned (+0%), 570k total (+108%), 25.3 steps/time
INFO (Carpet): GF: vars: 132, pts: 1M active, 1M owned (+0%), 3M total (+108%), 1.0 comp/proc
INFO (Carpet): GA: vars: 114, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 0.024 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv      max/avg-1
INFO (Carpet): Level  0:       1M      1M      1M      0M active      0%
INFO (CarpetIOHDF5): reading grid variables on mglevel 0 reflevel 0
INFO (CarpetIOHDF5): restarting simulation on mglevel 0 reflevel 0 at iteration 1 (simulation time 0.0394737)
INFO (AHFinderDirect): proc 0: searching for horizon 1/1
INFO (AHFinderDirect): AH 1/1: r=1.99605 at (-0.000012,0.000007,-0.000000)
INFO (AHFinderDirect): AH 1/1: area=45.23771048 m_irreducible=0.9486704668
INFO (AHFinderDirect): timer stats for computation:
Results from timer "finding apparent horizons":
	gettimeofday: 3.243 secs
	getrusage: 3.382 secs
	cycle: 7823351563.000 secs
	cycle[avg]: 7823351563.000 secs
	cycle[stddev]: 0.000 secs
	cycle[min]: 7823351563.000 secs
	cycle[max]: 7823351563.000 secs
LoopControl timing statistics:
Loop #0 "ML_BSSN_constraints1":
   total count: 4   total setup: 0   total calc: 0.0261078
   avg calc: 0.00652695   avg first calc: 0.00652695
   avg improvement: 0%   saved: 0 seconds
Loop #1 "ML_BSSN_enforce":
   total count: 12   total setup: 0.000225171   total calc: 0.0734959
   avg calc: 0.00612466   avg first calc: 0.00612431
   avg improvement: -0%   saved: -4.18955e-06 seconds
Loop #2 "ML_BSSN_Advect":
   total count: 12   total setup: 0.000252828   total calc: 0.173245
   avg calc: 0.0144371   avg first calc: 0.014437
   avg improvement: -0%   saved: -1.56434e-06 seconds
Loop #3 "ML_BSSN_Dissipation":
   total count: 12   total setup: 0.000197513   total calc: 0.150283
   avg calc: 0.0125236   avg first calc: 0.0125273
   avg improvement: 0%   saved: 4.4754e-05 seconds
Loop #4 "ML_BSSN_RHS2":
   total count: 12   total setup: 0.00018969   total calc: 0.0889629
   avg calc: 0.00741358   avg first calc: 0.00741561
   avg improvement: 0%   saved: 2.44181e-05 seconds
Loop #5 "ML_BSSN_RHS1":
   total count: 12   total setup: 0.000209526   total calc: 0.102385
   avg calc: 0.00853212   avg first calc: 0.0085297
   avg improvement: -0%   saved: -2.89981e-05 seconds
Loop #6 "ML_BSSN_InitRHS":
   total count: 8   total setup: 0.00012376   total calc: 0.0903346
   avg calc: 0.0112918   avg first calc: 0.0112924
   avg improvement: 0%   saved: 4.82877e-06 seconds
Loop #7 "ML_BSSN_convertToADMBaseDtLapseShiftBoundary":
   total count: 368   total setup: 0.0067026   total calc: 0.0211351
   avg calc: 5.74323e-05   avg first calc: 5.88234e-05
   avg improvement: 0%   saved: 0.000511934 seconds
Loop #8 "ML_BSSN_convertToADMBaseDtLapseShift":
   total count: 16   total setup: 0.000271823   total calc: 0.0496675
   avg calc: 0.00310422   avg first calc: 0.00310555
   avg improvement: 0%   saved: 2.12109e-05 seconds
Loop #9 "ML_BSSN_convertToADMBase":
   total count: 16   total setup: 0.000388604   total calc: 0.128412
   avg calc: 0.00802575   avg first calc: 0.00803115
   avg improvement: 0%   saved: 8.64968e-05 seconds
Loop #10 "Slab_copy_back_flipxy":
   total count: 804   total setup: 0.0108057   total calc: 0.0271552
   avg calc: 3.37751e-05   avg first calc: 3.37309e-05
   avg improvement: -0%   saved: -3.54787e-05 seconds
Loop #11 "Slab_copy_in_noxpose":
   total count: 804   total setup: 0.0110661   total calc: 0.0490177
   avg calc: 6.09673e-05   avg first calc: 6.08667e-05
   avg improvement: -0%   saved: -8.08845e-05 seconds
Total calculation time: 1.00307 seconds; total saved time: 0.000542527 seconds
--------------------------------------------------------------------------------
Done.
