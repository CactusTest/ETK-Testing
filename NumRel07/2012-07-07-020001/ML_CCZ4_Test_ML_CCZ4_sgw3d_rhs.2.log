/home/jhar131/TESTING/einsteintoolkit/2012-07-07-020001/Cactus/TEST/sim/ML_CCZ4_Test
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.1
Compile date:      Jul 07 2012 (02:49:05)
Run date:          Jul 07 2012 (03:47:23-0500)
Run host:          numrel07.cct.lsu.edu (pid=12412)
Working directory: /home/jhar131/TESTING/einsteintoolkit/2012-07-07-020001/Cactus/TEST/sim/ML_CCZ4_Test
Executable:        /home/jhar131/TESTING/einsteintoolkit/2012-07-07-020001/Cactus/exe/cactus_sim
Parameter file:    /home/jhar131/TESTING/einsteintoolkit/2012-07-07-020001/Cactus/arrangements/McLachlan/ML_CCZ4_Test/test/ML_CCZ4_sgw3d_rhs.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->CoordBase SymBase Boundary NanChecker CartGrid3d Time MoL CarpetIOBasic CarpetIOScalar IOUtil Carpet CarpetLib CarpetReduce CarpetInterp CarpetSlab CarpetIOASCII ADMBase StaticConformal SpaceMask Slab Periodic Exact GenericFD CoordGauge ADMCoupling LoopControl ML_CCZ4 ML_CCZ4_Helper GenericFD TMuNuBase SphericalSurface ADMMacros TimerReport<---
Warning: thorn GenericFD already scheduled for activation
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMCoupling...Success -> active implementation ADMCoupling
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3d...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn Exact...Success -> active implementation exact
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn ML_CCZ4...Success -> active implementation ML_CCZ4
Activating thorn ML_CCZ4_Helper...Success -> active implementation ML_CCZ4_Helper
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn NanChecker...Success -> active implementation NaNChecker
Activating thorn Periodic...Success -> active implementation Periodic
Activating thorn Slab...Success -> active implementation Slab
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn TimerReport...Success -> active implementation timerreport
Activating thorn TMuNuBase...Success -> active implementation TmunuBase
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CarpetLib::CarpetLib_registercycleclock: [global] Register cycle based timer
      ML_CCZ4_Helper::ML_CCZ4_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LoopControl::lc_check_type_sizes: [meta] Check that sizes of control structures are identical in C and Fortran
      ML_CCZ4::ML_CCZ4_Startup: [meta] create banner
      ML_CCZ4_Helper::ML_CCZ4_RegisterSlicing: [meta] Register slicing
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      MoL::MoL_Startup: Startup banner
      Slab::Slab_InitMPIDatatypes: Create MPI datatypes for complex variables in C
      SymBase::SymBase_Startup: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        ML_CCZ4::ML_CCZ4_RegisterVars: [meta] Register Variables for MoL
        ML_CCZ4_Helper::ML_CCZ4_RegisterConstrained: [meta] Register ADMBase variables as constrained
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
      Slab::Slab_InitTimers: Initialise timers
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          ML_CCZ4::ML_CCZ4_RegisterSymmetries: [meta] register symmetries
          Periodic::Periodic_RegisterBC: Register periodic boundary conditions
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      Exact::Exact_ParamCheck: [global] do consistency checks on our parameters
      MoL::MoL_ParamCheck: Basic parameter checking

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_CCZ4_constraints1_bc_group: ML_CCZ4_constraints1
            ML_CCZ4::ML_CCZ4_constraints1_SelectBCs: [level] ML_CCZ4_constraints1_SelectBCs
            GROUP ML_CCZ4_constraints1_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_constraints2_bc_group: ML_CCZ4_constraints2
            ML_CCZ4::ML_CCZ4_constraints2_SelectBCs: [level] ML_CCZ4_constraints2_SelectBCs
            GROUP ML_CCZ4_constraints2_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        ML_CCZ4::ML_CCZ4_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
          Exact::Exact__decode_pars: decode/copy thorn Exact parameters into grid scalars
          Exact::Exact__initialize: Set initial data from exact solution on a trivial slice
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          Exact::Exact__gauge: Set initial lapse and/or shift from exact solution on a trivial slice
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        ML_CCZ4::ML_CCZ4_InitGamma: ML_CCZ4_InitGamma
        ML_CCZ4::ML_CCZ4_convertFromADMBase: ML_CCZ4_convertFromADMBase
        MoL::MoL_StartLoop: [level] Initialise the step size control
        ML_CCZ4::ML_CCZ4_convertFromADMBaseGamma: ML_CCZ4_convertFromADMBaseGamma
      [CCTK_POSTINITIAL]
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_CCZ4::ML_CCZ4_enforce: ML_CCZ4_enforce
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
          GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_CCZ4_convertToADMBaseGroup: Calculate ADM variables
              ML_CCZ4::ML_CCZ4_convertToADMBase: ML_CCZ4_convertToADMBase
              ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShift: ML_CCZ4_convertToADMBaseDtLapseShift
              ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShiftBoundary: ML_CCZ4_convertToADMBaseDtLapseShiftBoundary
            ML_CCZ4_Helper::ML_CCZ4_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_CCZ4_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_CCZ4_constraints1_group: ML_CCZ4_constraints1
            ML_CCZ4::ML_CCZ4_constraints1: ML_CCZ4_constraints1
            GROUP ML_CCZ4_constraints1_bc_group: ML_CCZ4_constraints1
              ML_CCZ4::ML_CCZ4_constraints1_SelectBCs: [level] ML_CCZ4_constraints1_SelectBCs
              GROUP ML_CCZ4_constraints1_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints1
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_constraints2_group: ML_CCZ4_constraints2
            ML_CCZ4::ML_CCZ4_constraints2: ML_CCZ4_constraints2
            GROUP ML_CCZ4_constraints2_bc_group: ML_CCZ4_constraints2
              ML_CCZ4::ML_CCZ4_constraints2_SelectBCs: [level] ML_CCZ4_constraints2_SelectBCs
              GROUP ML_CCZ4_constraints2_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints2
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
          GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_CCZ4_convertToADMBaseGroup: Calculate ADM variables
              ML_CCZ4::ML_CCZ4_convertToADMBase: ML_CCZ4_convertToADMBase
              ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShift: ML_CCZ4_convertToADMBaseDtLapseShift
              ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShiftBoundary: ML_CCZ4_convertToADMBaseDtLapseShiftBoundary
            ML_CCZ4_Helper::ML_CCZ4_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_CCZ4_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_CCZ4_constraints1_bc_group: ML_CCZ4_constraints1
            ML_CCZ4::ML_CCZ4_constraints1_SelectBCs: [level] ML_CCZ4_constraints1_SelectBCs
            GROUP ML_CCZ4_constraints1_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_constraints2_bc_group: ML_CCZ4_constraints2
            ML_CCZ4::ML_CCZ4_constraints2_SelectBCs: [level] ML_CCZ4_constraints2_SelectBCs
            GROUP ML_CCZ4_constraints2_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
      [CCTK_POSTSTEP]
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        CartGrid3D::CartGrid3D_SetRanges: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        SphericalSurface::SphericalSurface_SetupRes: [global] [loop-local] Set surface resolution automatically
        ML_CCZ4::ML_CCZ4_CheckBoundaries: [meta] check boundaries treatment
        SphericalSurface::SphericalSurface_Setup: [global] Calculate surface coordinate descriptors
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SphericalSurface::SphericalSurface_Set: [global] Set surface radii to be used for initial setup in other thorns
        GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
          SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::Time_Simple: [singlemap] Set timestep based on Courant condition (courant_static)
        TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
          GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_CCZ4_convertToADMBaseGroupWrapper: Calculate ADM variables
            GROUP ML_CCZ4_convertToADMBaseGroup: Calculate ADM variables
              ML_CCZ4::ML_CCZ4_convertToADMBase: ML_CCZ4_convertToADMBase
              ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShift: ML_CCZ4_convertToADMBaseDtLapseShift
              ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShiftBoundary: ML_CCZ4_convertToADMBaseDtLapseShiftBoundary
            ML_CCZ4_Helper::ML_CCZ4_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
            GROUP ML_CCZ4_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
        ML_CCZ4::ML_CCZ4_InitRHS: ML_CCZ4_InitRHS
        GROUP ML_CCZ4_evolCalcGroup: Calculate BSSN RHS
          ML_CCZ4::ML_CCZ4_RHS1: ML_CCZ4_RHS1
          ML_CCZ4::ML_CCZ4_RHS2: ML_CCZ4_RHS2
          ML_CCZ4::ML_CCZ4_Dissipation: ML_CCZ4_Dissipation
          ML_CCZ4::ML_CCZ4_Advect: ML_CCZ4_Advect
        TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
        GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_CCZ4_convertToADMBaseGroup: Calculate ADM variables
            ML_CCZ4::ML_CCZ4_convertToADMBase: ML_CCZ4_convertToADMBase
            ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShift: ML_CCZ4_convertToADMBaseDtLapseShift
            ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShiftBoundary: ML_CCZ4_convertToADMBaseDtLapseShiftBoundary
          ML_CCZ4_Helper::ML_CCZ4_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_CCZ4_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_CCZ4_constraints1_bc_group: ML_CCZ4_constraints1
          ML_CCZ4::ML_CCZ4_constraints1_SelectBCs: [level] ML_CCZ4_constraints1_SelectBCs
          GROUP ML_CCZ4_constraints1_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_constraints2_bc_group: ML_CCZ4_constraints2
          ML_CCZ4::ML_CCZ4_constraints2_SelectBCs: [level] ML_CCZ4_constraints2_SelectBCs
          GROUP ML_CCZ4_constraints2_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                ML_CCZ4::ML_CCZ4_RHSStaticBoundary: ML_CCZ4_RHSStaticBoundary
                GROUP ML_CCZ4_evolCalcGroup: Calculate BSSN RHS
                  ML_CCZ4::ML_CCZ4_RHS1: ML_CCZ4_RHS1
                  ML_CCZ4::ML_CCZ4_RHS2: ML_CCZ4_RHS2
                  ML_CCZ4::ML_CCZ4_Dissipation: ML_CCZ4_Dissipation
                  ML_CCZ4::ML_CCZ4_Advect: ML_CCZ4_Advect
              GROUP MoL_PostRHS: Modify RHS functions
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_CCZ4::ML_CCZ4_enforce: ML_CCZ4_enforce
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
                GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ML_CCZ4_convertToADMBaseGroupWrapper: Calculate ADM variables
                  GROUP ML_CCZ4_convertToADMBaseGroup: Calculate ADM variables
                    ML_CCZ4::ML_CCZ4_convertToADMBase: ML_CCZ4_convertToADMBase
                    ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShift: ML_CCZ4_convertToADMBaseDtLapseShift
                    ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShiftBoundary: ML_CCZ4_convertToADMBaseDtLapseShiftBoundary
                  ML_CCZ4_Helper::ML_CCZ4_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
                  GROUP ML_CCZ4_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
                    GROUP BoundaryConditions: Execute all boundary conditions
                      Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                      CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                      Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
                    Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
      end while
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_CCZ4_constraints1_group: ML_CCZ4_constraints1
          ML_CCZ4::ML_CCZ4_constraints1: ML_CCZ4_constraints1
          GROUP ML_CCZ4_constraints1_bc_group: ML_CCZ4_constraints1
            ML_CCZ4::ML_CCZ4_constraints1_SelectBCs: [level] ML_CCZ4_constraints1_SelectBCs
            GROUP ML_CCZ4_constraints1_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints1
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_constraints2_group: ML_CCZ4_constraints2
          ML_CCZ4::ML_CCZ4_constraints2: ML_CCZ4_constraints2
          GROUP ML_CCZ4_constraints2_bc_group: ML_CCZ4_constraints2
            ML_CCZ4::ML_CCZ4_constraints2_SelectBCs: [level] ML_CCZ4_constraints2_SelectBCs
            GROUP ML_CCZ4_constraints2_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints2
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
        GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_CCZ4_convertToADMBaseGroup: Calculate ADM variables
            ML_CCZ4::ML_CCZ4_convertToADMBase: ML_CCZ4_convertToADMBase
            ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShift: ML_CCZ4_convertToADMBaseDtLapseShift
            ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShiftBoundary: ML_CCZ4_convertToADMBaseDtLapseShiftBoundary
          ML_CCZ4_Helper::ML_CCZ4_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_CCZ4_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_CCZ4_constraints1_bc_group: ML_CCZ4_constraints1
          ML_CCZ4::ML_CCZ4_constraints1_SelectBCs: [level] ML_CCZ4_constraints1_SelectBCs
          GROUP ML_CCZ4_constraints1_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_constraints2_bc_group: ML_CCZ4_constraints2
          ML_CCZ4::ML_CCZ4_constraints2_SelectBCs: [level] ML_CCZ4_constraints2_SelectBCs
          GROUP ML_CCZ4_constraints2_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      SphericalSurface::SphericalSurface_Set: [global] Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface::SphericalSurface_CheckState: [global] Test the state of the spherical surfaces
  if (checkpoint)
    [CCTK_CHECKPOINT]
      TimerReport::zzz_TimerReport_Checkpoint: [global] Print the timer report
  endif
  if (analysis)
    [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      LoopControl::lc_printstats_analysis: [meta] Output loop control statistics
      ML_CCZ4::ML_CCZ4_InitRHS: ML_CCZ4_InitRHS
      GROUP ML_CCZ4_evolCalcGroup: Calculate BSSN RHS
        ML_CCZ4::ML_CCZ4_RHS1: ML_CCZ4_RHS1
        ML_CCZ4::ML_CCZ4_RHS2: ML_CCZ4_RHS2
        ML_CCZ4::ML_CCZ4_Dissipation: ML_CCZ4_Dissipation
        ML_CCZ4::ML_CCZ4_Advect: ML_CCZ4_Advect
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report
  endif
  Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
      LoopControl::lc_printstats_terminate: [meta] Output loop control statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays
      TimerReport::zzz_TimerReport_Output: [global] Print the timer report

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ML_CCZ4::ML_CCZ4_SelectBoundConds: [level] select boundary conditions
        GROUP ML_CCZ4_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_convertToADMBaseGroupWrapper: Calculate ADM variables
          GROUP ML_CCZ4_convertToADMBaseGroup: Calculate ADM variables
            ML_CCZ4::ML_CCZ4_convertToADMBase: ML_CCZ4_convertToADMBase
            ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShift: ML_CCZ4_convertToADMBaseDtLapseShift
            ML_CCZ4::ML_CCZ4_convertToADMBaseDtLapseShiftBoundary: ML_CCZ4_convertToADMBaseDtLapseShiftBoundary
          ML_CCZ4_Helper::ML_CCZ4_SelectBCsADMBase: [level] Select boundary conditions for ADMBase variables
          GROUP ML_CCZ4_ApplyBCsADMBase: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_CCZ4_constraints1_bc_group: ML_CCZ4_constraints1
          ML_CCZ4::ML_CCZ4_constraints1_SelectBCs: [level] ML_CCZ4_constraints1_SelectBCs
          GROUP ML_CCZ4_constraints1_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints1
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_CCZ4_constraints2_bc_group: ML_CCZ4_constraints2
          ML_CCZ4::ML_CCZ4_constraints2_SelectBCs: [level] ML_CCZ4_constraints2_SelectBCs
          GROUP ML_CCZ4_constraints2_ApplyBCs: Apply BCs for groups set in ML_CCZ4_constraints2
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              Periodic::Periodic_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
Current core file size limit: hard=[unlimited], soft=0 MB
Current memory size limit: hard=[unlimited], soft=[unlimited]
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
ML_CCZ4
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 4 threads, this is thread 0
INFO (Carpet): There are 8 threads in total
INFO (Carpet): There are 4 threads per process
INFO (Carpet): Host listing:
   host 0: "numrel07.cct.lsu.edu"
INFO (Carpet): Host/process mapping:
   processes 0-1: host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): Host mapping: This is process 0, host 0 "numrel07.cct.lsu.edu"
INFO (Carpet): This process runs on host numrel07.cct.lsu.edu, pid=12412
INFO (Carpet): This process runs on 4 cores: 0-3
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): [tl=0] Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,1,1],[0,0,0]]
INFO (Carpet): [tl=0] CoordBase domain specification for map 0:
   physical extent: [0,0,0] : [1,1,1]   ([1,1,1])
   interior extent: [0,0,0] : [0.9,0.9,0.9]   ([0.9,0.9,0.9])
   exterior extent: [-0.3,-0.3,-0.3] : [1.2,1.2,1.2]   ([1.5,1.5,1.5])
   base_spacing   : [0.1,0.1,0.1]
INFO (Carpet): [tl=0] Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [0,0,0] : [1,1,1]   ([1,1,1])
   interior extent   : [0,0,0] : [0.9,0.9,0.9]   ([0.9,0.9,0.9])
   exterior extent   : [-0.3,-0.3,-0.3] : [1.2,1.2,1.2]   ([1.5,1.5,1.5])
   spacing           : [0.1,0.1,0.1]
INFO (Carpet): [tl=0] Base grid specification for map 0:
   number of grid points             : [16,16,16]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 378 grid functions in 57 groups
INFO (Carpet):    There are 86 grid scalars in 37 groups
INFO (Carpet):    There are 7 1-dimensional grid arrays in 3 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): Periodic 1D AMR output requested for:
   ADMBASE::gxx
   ADMBASE::kxx
   ML_CCZ4::cS
   ML_CCZ4::cXt1
   ML_CCZ4::cXt2
   ML_CCZ4::cXt3
   ML_CCZ4::cA
   ML_CCZ4::At11
   ML_CCZ4::At12
   ML_CCZ4::At13
   ML_CCZ4::At22
   ML_CCZ4::At23
   ML_CCZ4::At33
   ML_CCZ4::A
   ML_CCZ4::B1
   ML_CCZ4::B2
   ML_CCZ4::B3
   ML_CCZ4::Xt1
   ML_CCZ4::Xt2
   ML_CCZ4::Xt3
   ML_CCZ4::alpha
   ML_CCZ4::phi
   ML_CCZ4::gt11
   ML_CCZ4::gt12
   ML_CCZ4::gt13
   ML_CCZ4::gt22
   ML_CCZ4::gt23
   ML_CCZ4::gt33
   ML_CCZ4::beta1
   ML_CCZ4::beta2
   ML_CCZ4::beta3
   ML_CCZ4::Theta
   ML_CCZ4::trK
   ML_CCZ4::At11rhs
   ML_CCZ4::At12rhs
   ML_CCZ4::At13rhs
   ML_CCZ4::At22rhs
   ML_CCZ4::At23rhs
   ML_CCZ4::At33rhs
   ML_CCZ4::Arhs
   ML_CCZ4::B1rhs
   ML_CCZ4::B2rhs
   ML_CCZ4::B3rhs
   ML_CCZ4::Xt1rhs
   ML_CCZ4::Xt2rhs
   ML_CCZ4::Xt3rhs
   ML_CCZ4::alpharhs
   ML_CCZ4::phirhs
   ML_CCZ4::gt11rhs
   ML_CCZ4::gt12rhs
   ML_CCZ4::gt13rhs
   ML_CCZ4::gt22rhs
   ML_CCZ4::gt23rhs
   ML_CCZ4::gt33rhs
   ML_CCZ4::beta1rhs
   ML_CCZ4::beta2rhs
   ML_CCZ4::beta3rhs
   ML_CCZ4::Thetarhs
   ML_CCZ4::trKrhs
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (MoL): The maximum number of evolved variables is 26. 26 are registered.
INFO (MoL): The maximum number of constrained variables is 20. 20 are registered.
INFO (MoL): The maximum number of SandR variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (SymBase): Symmetry on lower x-face: periodic
INFO (SymBase): Symmetry on upper x-face: periodic
INFO (SymBase): Symmetry on lower y-face: periodic
INFO (SymBase): Symmetry on upper y-face: periodic
INFO (SymBase): Symmetry on lower z-face: periodic
INFO (SymBase): Symmetry on upper z-face: periodic
INFO (ADMMacros): Spatial finite differencing order: 2
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>1.0000000e-01  dy=>1.0000000e-01  dz=>1.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-0.300, 1.200]  y=>[-0.300, 1.200]  z=>[-0.300, 1.200]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,15]  y=>[0,15]  z=>[0,15]
INFO (Time): Timestep set to 0.05 (courant_static)
INFO (Exact): setting exact data on slice
-----------------------------------------------
Iteration      Time |              ADMBASE::alp
                    |      minimum      maximum
-----------------------------------------------
        0     0.000 |    0.9555909    1.0512380
LoopControl timing statistics:
Loop #0 "Slab_copy_back_noflip":
   total count: 3960   total setup: 8.18761   total calc: 6.19243
   avg calc: 0.00156375   avg first calc: 0.00139927
   avg improvement: -12%   saved: -0.651326 seconds
Loop #1 "Slab_copy_in_noxpose":
   total count: 3960   total setup: 8.23582   total calc: 6.21274
   avg calc: 0.00156887   avg first calc: 0.00140453
   avg improvement: -12%   saved: -0.650806 seconds
Total calculation time: 12.6051 seconds; total saved time: -1.30213 seconds
INFO (TimerReport): Timer Report before terminating at iteration 0 time 0
INFO (TimerReport): Top timers at iteration 0 time 0
======================================================================
    %    Time/s   Min/s   Max/s   Timer (gettimeofday)
======================================================================
100.0   10.8990 10.8768 10.9213   main/Initialise
 88.0    9.5905  9.5631  9.6179   Slab/apply
 49.9    5.4395  5.4372  5.4418   main/Initialise/CallInitial
 47.7    5.2024  5.2024  5.2024   main/Initialise/CallRestrict
 47.7    5.2023  5.2022  5.2023   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL
 47.7    5.2018  5.2018  5.2018   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL/CallFunction
 47.5    5.1790  5.1745  5.1835   main/Initialise/CallInitial/CCTK_POSTINITIAL
 47.5    5.1785  5.1740  5.1830   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction
 46.9    5.1079  5.1052  5.1107   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL/CallFunction/thorns
 46.7    5.0921  5.0892  5.0950   [0089] Periodic: Periodic_ApplyBC in CCTK_POSTRESTRICTINITIAL
 46.7    5.0919  5.0889  5.0948   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL/CallFunction/thorns/Periodic_ApplyBC
 46.6    5.0839  5.0809  5.0869   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns
 46.3    5.0460  5.0436  5.0484   [0076] Periodic: Periodic_ApplyBC in CCTK_POSTINITIAL
 46.3    5.0457  5.0433  5.0481   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/thorns/Periodic_ApplyBC
 41.4    4.5149  4.4880  4.5419   Slab/copy_back
 41.4    4.5139  4.4884  4.5394   Slab/copy_in
 41.3    4.5035  4.4803  4.5268   Slab/copy_in_noxpose
  9.2    1.0000  1.0000  1.0000   [0001] CarpetLib: CarpetLib_registercycleclock in CCTK_STARTUP
  5.1    0.5517  0.5259  0.5775   Slab/xfer
  2.6    0.2839  0.0612  0.5066   Slab/init
  2.3    0.2480  0.2234  0.2726   main/Initialise/CallAnalysis
  1.6    0.1767  0.1745  0.1788   main/Initialise/CallInitial/CCTK_INITIAL
  1.6    0.1765  0.1743  0.1786   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction
  1.4    0.1544  0.1481  0.1607   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns
  1.2    0.1296  0.1161  0.1431   main/Initialise/CallAnalysis/CCTK_ANALYSIS
  1.1    0.1181  0.1071  0.1292   main/Initialise/CallAnalysis/OutputGH
  1.1    0.1181  0.1070  0.1292   main/Initialise/CallAnalysis/OutputGH/OutputGH
  1.0    0.1138  0.1028  0.1247   main/Initialise/CallAnalysis/OutputGH/OutputGH/IOASCII::IOASCII_1D [2]
  1.0    0.1137  0.1028  0.1247   main/Initialise/CallAnalysis/OutputGH/OutputGH/IOASCII::IOASCII_1D [2]/OutputGH<1>
  0.9    0.0934  0.0858  0.1009   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/syncs
  0.9    0.0933  0.0857  0.1008   main/Initialise/CallInitial/CCTK_POSTINITIAL/CallFunction/syncs/Sync
  0.9    0.0929  0.0902  0.0956   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL/CallFunction/syncs
  0.9    0.0928  0.0901  0.0955   main/Initialise/CallRestrict/CCTK_POSTRESTRICTINITIAL/CallFunction/syncs/Sync
  0.7    0.0774  0.0773  0.0775   main/Initialise/CallInitial/CCTK_BASEGRID
  0.7    0.0768  0.0767  0.0770   main/Initialise/CallInitial/CCTK_BASEGRID/CallFunction
  0.7    0.0761  0.0759  0.0762   main/Initialise/CallInitial/CCTK_BASEGRID/CallFunction/thorns
  0.6    0.0674  0.0652  0.0697   [0054] CarpetReduce: CoordBase_SetupMask in CCTK_BASEGRID
  0.6    0.0674  0.0651  0.0696   main/Initialise/CallInitial/CCTK_BASEGRID/CallFunction/thorns/CoordBase_SetupMask
  0.6    0.0673  0.0667  0.0679   [0066] Exact: Exact__initialize in CCTK_INITIAL
  0.6    0.0673  0.0667  0.0678   main/Initialise/CallInitial/CCTK_INITIAL/CallFunction/thorns/Exact__initialize
======================================================================
--------------------------------------------------------------------------------
Done.
